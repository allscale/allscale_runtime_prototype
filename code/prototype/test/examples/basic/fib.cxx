/**
 * ------------------------ Auto-generated Code ------------------------ 
 *           This code was generated by the Insieme Compiler 
 * --------------------------------------------------------------------- 
 */
#include <allscale/runtime.hpp>
#include <iostream>
#include <stdbool.h>
#include <stdint.h>

#ifdef __cplusplus
#define INS_INIT(...) __VA_ARGS__
#else
#define INS_INIT(...) (__VA_ARGS__)
#endif
#ifdef __cplusplus
#include <new>
#define INS_INPLACE_INIT(Loc,Type) new(Loc) Type
#else
#define INS_INPLACE_INIT(Loc,Type) *(Loc) = (Type)
#endif
#ifdef __cplusplus
				/** Workaround for libstdc++/libc bug.
				 *  There's an inconsistency between libstdc++ and libc regarding whether
				 *  ::gets is declared or not, which is only evident when using certain
				 *  compilers and language settings
				 *  (tested positively with clang 3.9 --std=c++14 and libc 2.17).
				 */
				#include <initializer_list>  // force libstdc++ to include its config
				#undef _GLIBCXX_HAVE_GETS    // correct broken config
#endif

/* ------- Program Code --------- */

struct __wi_main_name {
    static const char* name() { return "__wi_main"; }
};

struct __wi_main_variant_1;
typedef struct __wi_main_variant_1 __wi_main_variant_1;

struct __wi_main_can_split;
typedef struct __wi_main_can_split __wi_main_can_split;

struct __wi_main_variant_0;
typedef struct __wi_main_variant_0 __wi_main_variant_0;

using __wi_main_work = allscale::work_item_description<int32_t, __wi_main_name, allscale::no_serialization, __wi_main_variant_0, __wi_main_variant_1, __wi_main_can_split >;

/* ------- Function Definitions --------- */
int32_t main(int32_t var_0, char** var_1) {
    return allscale::runtime::main_wrapper<__wi_main_work >(var_0, var_1);
}

struct __wi_allscale_wi_1_variant_1;
typedef struct __wi_allscale_wi_1_variant_1 __wi_allscale_wi_1_variant_1;

struct __wi_allscale_wi_1_can_split;
typedef struct __wi_allscale_wi_1_can_split __wi_allscale_wi_1_can_split;

struct __wi_allscale_wi_1_name {
    static const char* name() { return "__wi_allscale_wi_1"; }
};

struct __wi_allscale_wi_1_variant_0;
typedef struct __wi_allscale_wi_1_variant_0 __wi_allscale_wi_1_variant_0;

using __wi_allscale_wi_1_work = allscale::work_item_description<int32_t, __wi_allscale_wi_1_name, allscale::do_serialization, __wi_allscale_wi_1_variant_0, __wi_allscale_wi_1_variant_1, __wi_allscale_wi_1_can_split >;

ALLSCALE_REGISTER_TREETURE_TYPE(int32_t)
/* ------- Function Definitions --------- */
allscale::treeture<int32_t > allscale_fun_9(allscale::runtime::dependencies const& var_0, hpx::util::tuple<int32_t > const& var_1) {
    return allscale::spawn_first_with_dependencies<__wi_allscale_wi_1_work >(var_0, hpx::util::get<0 >(var_1));
}
/* ------- Function Definitions --------- */
int32_t IMP_fibEager(int32_t var_0) {
    auto var_1 = allscale::runtime::make_prec_operation<int32_t, int32_t >((hpx::util::tuple< > const&)INS_INIT(hpx::util::tuple< >){}, &allscale_fun_9);
    return var_1(var_0).get_result();
}
/* ------- Function Prototypes ---------- */
int32_t IMP_fib_static(int32_t p1);

/* ------- Function Definitions --------- */
int32_t allscale_fun_5(int32_t var_0, char** var_1) {
    const int32_t var_2 = 10;
    const int32_t var_3 = IMP_fib_static(var_2);
    const int32_t var_4 = IMP_fibEager(var_2);
    std::cout << var_3 << &std::endl;
    std::cout << var_4 << &std::endl;
    bool a = var_3 == var_4;
    std::cout << a << &std::endl;
    return a ? 0 : 1;
}
/* ------- Function Definitions --------- */
allscale::treeture<int32_t > allscale_fun_3(hpx::util::tuple<int32_t, char** > const& var_0) {
    return allscale::treeture<int32_t >(allscale_fun_5(hpx::util::get<0 >(var_0), hpx::util::get<1 >(var_0)));
}
struct __wi_main_variant_1 {
    static allscale::treeture<int32_t > execute(hpx::util::tuple<int32_t, char** > const& var_0);
    static constexpr bool valid = true;
};

/* ------- Function Prototypes ---------- */
int32_t rec(hpx::util::tuple<int32_t > const& p1);

/* ------- Function Definitions --------- */
allscale::treeture<int32_t > allscale_fun_17(hpx::util::tuple<int32_t > const& var_0) {
    return allscale::treeture<int32_t >(rec(var_0));
}
/* ------- Function Definitions --------- */
hpx::util::tuple< > allscale_fun_15(hpx::util::tuple<int32_t > const& var_0) {
    return INS_INIT(hpx::util::tuple< >){};
}
struct __wi_allscale_wi_1_variant_1 {
    static allscale::treeture<int32_t > execute(hpx::util::tuple<int32_t > const& var_0);
    static hpx::util::tuple< > get_requirements(hpx::util::tuple<int32_t > const& var_0);
    static constexpr bool valid = true;
};

/* ------- Function Definitions --------- */
int32_t allscale_fun_22(hpx::util::tuple<int32_t > const& var_0) {
    int32_t var_1 = rec((hpx::util::tuple<int32_t > const&)INS_INIT(hpx::util::tuple<int32_t >){*(int32_t*)(&hpx::util::get<0 >(var_0)) - 1});
    int32_t var_2 = rec((hpx::util::tuple<int32_t > const&)INS_INIT(hpx::util::tuple<int32_t >){*(int32_t*)(&hpx::util::get<0 >(var_0)) - 2});
    return var_1 + var_2;
}
/* ------- Function Definitions --------- */
bool allscale_fun_19(hpx::util::tuple<int32_t > const& var_0) {
    return *(int32_t*)(&hpx::util::get<0 >(var_0)) < 2;
}
/* ------- Function Definitions --------- */
int32_t allscale_fun_21(hpx::util::tuple<int32_t > const& var_0) {
    return *(int32_t*)(&hpx::util::get<0 >(var_0));
}
/* ------- Function Definitions --------- */
int32_t rec(hpx::util::tuple<int32_t > const& var_0) {
    if (allscale_fun_19(var_0)) {
        return allscale_fun_21(var_0);
    } else {
        return allscale_fun_22(var_0);
    };
}
allscale::treeture<int32_t > __wi_allscale_wi_1_variant_1::execute(hpx::util::tuple<int32_t > const& var_0) {
    return allscale_fun_17(var_0);
}
hpx::util::tuple< > __wi_allscale_wi_1_variant_1::get_requirements(hpx::util::tuple<int32_t > const& var_0) {
    return allscale_fun_15(var_0);
}
/* ------- Function Definitions --------- */
bool allscale_fun_23(hpx::util::tuple<int32_t > const& var_0) {
    return !allscale_fun_19(var_0);
}
struct __wi_allscale_wi_1_can_split {
    static bool call(hpx::util::tuple<int32_t > const& var_0);
};

bool __wi_allscale_wi_1_can_split::call(hpx::util::tuple<int32_t > const& var_0) {
    return allscale_fun_23(var_0);
}
/* ------- Function Definitions --------- */
allscale::treeture<int32_t > allscale_fun_13(hpx::util::tuple<int32_t > const& var_0) {
    allscale::treeture<int32_t > var_1 = allscale::spawn_with_dependencies<__wi_allscale_wi_1_work >(allscale::runtime::after(), *(int32_t*)(&hpx::util::get<0 >(var_0)) - 1);
    allscale::treeture<int32_t > var_2 = allscale::spawn_with_dependencies<__wi_allscale_wi_1_work >(allscale::runtime::after(), *(int32_t*)(&hpx::util::get<0 >(var_0)) - 2);
    return allscale::treeture<int32_t >(var_1.get_result() + var_2.get_result());
}
/* ------- Function Definitions --------- */
allscale::treeture<int32_t > allscale_fun_11(hpx::util::tuple<int32_t > const& var_0) {
    return allscale_fun_13(var_0);
}
struct __wi_allscale_wi_1_variant_0 {
    static allscale::treeture<int32_t > execute(hpx::util::tuple<int32_t > const& var_0);
    static hpx::util::tuple< > get_requirements(hpx::util::tuple<int32_t > const& var_0);
    static constexpr bool valid = true;
};

hpx::util::tuple< > __wi_allscale_wi_1_variant_0::get_requirements(hpx::util::tuple<int32_t > const& var_0) {
    return allscale_fun_15(var_0);
}
allscale::treeture<int32_t > __wi_allscale_wi_1_variant_0::execute(hpx::util::tuple<int32_t > const& var_0) {
    return allscale_fun_11(var_0);
}
/* ------- Function Definitions --------- */
int32_t IMP_fib_static(int32_t var_0) {
    return var_0 < 2 ? var_0 : IMP_fib_static(var_0 - 1) + IMP_fib_static(var_0 - 2);
}
allscale::treeture<int32_t > __wi_main_variant_1::execute(hpx::util::tuple<int32_t, char** > const& var_0) {
    return allscale_fun_3(var_0);
}
/* ------- Function Definitions --------- */
bool allscale_fun_34(hpx::util::tuple<int32_t, char** > const& var_0) {
    return (bool)false;
}
struct __wi_main_can_split {
    static bool call(hpx::util::tuple<int32_t, char** > const& var_0);
};

bool __wi_main_can_split::call(hpx::util::tuple<int32_t, char** > const& var_0) {
    return allscale_fun_34(var_0);
}
struct __wi_main_variant_0 {
    static allscale::treeture<int32_t > execute(hpx::util::tuple<int32_t, char** > const& var_0);
    static constexpr bool valid = true;
};

allscale::treeture<int32_t > __wi_main_variant_0::execute(hpx::util::tuple<int32_t, char** > const& var_0) {
    return allscale_fun_3(var_0);
}

