/**
 * ------------------------ Auto-generated Code ------------------------ 
 *           This code was generated by the Insieme Compiler 
 * --------------------------------------------------------------------- 
 */
#include <algorithm>
#include <alloca.h>
#include <allscale/runtime.hpp>
#include <allscale/utils/serializer.h>
#include <allscale/utils/serializer/vectors.h>
#include <allscale/utils/vector.h>
#include <assert.h>
#include <chrono>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <fstream>
#include <iostream>
#include <regex>
#include <stdbool.h>
#include <stdint.h>
#include <utility>
#include <vector>
#include <random>

#ifdef __cplusplus
#define INS_INIT(...) __VA_ARGS__
#else
#define INS_INIT(...) (__VA_ARGS__)
#endif
#ifdef __cplusplus
#include <new>
#define INS_INPLACE_INIT(Loc,Type) new(Loc) Type
#else
#define INS_INPLACE_INIT(Loc,Type) *(Loc) = (Type)
#endif
#ifdef __cplusplus
				/** Workaround for libstdc++/libc bug.
				 *  There's an inconsistency between libstdc++ and libc regarding whether
				 *  ::gets is declared or not, which is only evident when using certain
				 *  compilers and language settings
				 *  (tested positively with clang 3.9 --std=c++14 and libc 2.17).
				 */
				#include <initializer_list>  // force libstdc++ to include its config
				#undef _GLIBCXX_HAVE_GETS    // correct broken config
#endif

using std::sqrt;
using std::pow;
using std::fabs;
using std::exp;
using std::log;

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

/* ------- Program Code --------- */

struct __wi_main_name {
    static const char* name() { return "__wi_main"; }
};

struct __wi_main_variant_0;
typedef struct __wi_main_variant_0 __wi_main_variant_0;

struct __wi_main_variant_1;
typedef struct __wi_main_variant_1 __wi_main_variant_1;

struct __wi_main_can_split;
typedef struct __wi_main_can_split __wi_main_can_split;

using __wi_main_work = allscale::work_item_description<int32_t, __wi_main_name, allscale::no_serialization, __wi_main_variant_0, __wi_main_variant_1, __wi_main_can_split >;

/* ------- Function Definitions --------- */
int32_t main(int32_t var_0, char** var_1) {
    return allscale::runtime::main_wrapper<__wi_main_work >(var_0, var_1);
}

ALLSCALE_REGISTER_TREETURE_TYPE(int32_t)
typedef enum ipic3dUseCase { ipic3dUseCaseDipole=0, ipic3dUseCaseTest=1 } ipic3dUseCase;
struct allscale_type_16;
typedef struct allscale_type_16 allscale_type_16;

template<typename T>
struct is_allscale_fixed_sized_array : public std::false_type {};

template<typename T>
struct to_std_array_type;

namespace allscale {
    namespace utils {
        template<typename T>
        struct serializer<T,typename std::enable_if<is_allscale_fixed_sized_array<T>::value,void>::type> {
            using array_t = typename to_std_array_type<T>::type;
            static T load(ArchiveReader& a) {
                return *reinterpret_cast<T*>(&serializer<array_t>::load(a)[0]);
            }
            static void store(ArchiveWriter& a, const T& value) {
                serializer<array_t>::store(a,reinterpret_cast<const array_t&>(value));
            }
        };
    }
}

struct allscale_type_16 {
    char data[6];;
};

template<> struct is_allscale_fixed_sized_array<allscale_type_16> : public std::true_type {};
template<> struct to_std_array_type<allscale_type_16> { using type = std::array<char,6u>; };

struct allscale_type_11;
typedef struct allscale_type_11 allscale_type_11;

struct allscale_type_11 {
    char data[9];;
};

template<> struct is_allscale_fixed_sized_array<allscale_type_11> : public std::true_type {};
template<> struct to_std_array_type<allscale_type_11> { using type = std::array<char,9u>; };

struct allscale_type_17;
typedef struct allscale_type_17 allscale_type_17;

struct allscale_type_17 {
    char data[14];;
};

template<> struct is_allscale_fixed_sized_array<allscale_type_17> : public std::true_type {};
template<> struct to_std_array_type<allscale_type_17> { using type = std::array<char,14u>; };

struct allscale_type_119;
typedef struct allscale_type_119 allscale_type_119;

struct allscale_type_119 {
    char data[5];;
};

template<> struct is_allscale_fixed_sized_array<allscale_type_119> : public std::true_type {};
template<> struct to_std_array_type<allscale_type_119> { using type = std::array<char,5u>; };

struct allscale_type_48;
typedef struct allscale_type_48 allscale_type_48;

struct allscale_type_48 {
    char data[50];;
};

template<> struct is_allscale_fixed_sized_array<allscale_type_48> : public std::true_type {};
template<> struct to_std_array_type<allscale_type_48> { using type = std::array<char,50u>; };

struct allscale_type_14;
typedef struct allscale_type_14 allscale_type_14;

struct allscale_type_14 {
    char data[36];;
};

template<> struct is_allscale_fixed_sized_array<allscale_type_14> : public std::true_type {};
template<> struct to_std_array_type<allscale_type_14> { using type = std::array<char,36u>; };

struct allscale_type_15;
typedef struct allscale_type_15 allscale_type_15;

struct allscale_type_15 {
    char data[12];;
};

template<> struct is_allscale_fixed_sized_array<allscale_type_15> : public std::true_type {};
template<> struct to_std_array_type<allscale_type_15> { using type = std::array<char,12u>; };

struct allscale_type_7;
typedef struct allscale_type_7 allscale_type_7;

struct allscale_type_7 {
    char data[37];;
};

template<> struct is_allscale_fixed_sized_array<allscale_type_7> : public std::true_type {};
template<> struct to_std_array_type<allscale_type_7> { using type = std::array<char,37u>; };

struct IMP_ipic3d_colon__colon_UniverseProperties;
typedef struct IMP_ipic3d_colon__colon_UniverseProperties IMP_ipic3d_colon__colon_UniverseProperties;

struct IMP_ParticleCount;
typedef struct IMP_ParticleCount IMP_ParticleCount;

struct IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13;
typedef struct IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13 IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13;

struct IMP_ipic3d_colon__colon_Parameters;
typedef struct IMP_ipic3d_colon__colon_Parameters IMP_ipic3d_colon__colon_Parameters;

struct DummyCtorParamType;
typedef struct DummyCtorParamType DummyCtorParamType;

struct IMP_ipic3d_colon__colon_UniverseProperties {
    ipic3dUseCase useCase;
    allscale::utils::Vector<long, 3 > size;
    allscale::utils::Vector<double, 3 > cellWidth;
    double dt;
    double speedOfLight;
    double planetRadius;
    allscale::utils::Vector<double, 3 > objectCenter;
    allscale::utils::Vector<double, 3 > origin;
    allscale::utils::Vector<double, 3 > externalMagneticField;
    int32_t FieldOutputCycle;
    int32_t ParticleOutputCycle;
    std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > outputFileBaseName;;
    IMP_ipic3d_colon__colon_UniverseProperties();
    IMP_ipic3d_colon__colon_UniverseProperties(ipic3dUseCase const& p2, allscale::utils::Vector<long, 3 > const& p3, allscale::utils::Vector<double, 3 > const& p4, double p5, double p6, double p7, allscale::utils::Vector<double, 3 > const& p8, allscale::utils::Vector<double, 3 > const& p9, allscale::utils::Vector<double, 3 > const& p10, int32_t p11, int32_t p12);
    IMP_ipic3d_colon__colon_UniverseProperties(IMP_ipic3d_colon__colon_Parameters const& p2);
    IMP_ipic3d_colon__colon_UniverseProperties(IMP_ipic3d_colon__colon_UniverseProperties const& p2) = default;
    IMP_ipic3d_colon__colon_UniverseProperties(IMP_ipic3d_colon__colon_UniverseProperties&& p2) = default;
    IMP_ipic3d_colon__colon_UniverseProperties(ipic3dUseCase&& p2, allscale::utils::Vector<long, 3 >&& p3, allscale::utils::Vector<double, 3 >&& p4, double&& p5, double&& p6, double&& p7, allscale::utils::Vector<double, 3 >&& p8, allscale::utils::Vector<double, 3 >&& p9, allscale::utils::Vector<double, 3 >&& p10, int32_t&& p11, int32_t&& p12, std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&& p13, DummyCtorParamType p14);
    ~IMP_ipic3d_colon__colon_UniverseProperties() = default;
    IMP_ipic3d_colon__colon_UniverseProperties& operator=(IMP_ipic3d_colon__colon_UniverseProperties const& p2) = default;
    IMP_ipic3d_colon__colon_UniverseProperties& operator=(IMP_ipic3d_colon__colon_UniverseProperties&& p2) = default;
    void store(allscale::utils::ArchiveWriter& p2) const;
    static IMP_ipic3d_colon__colon_UniverseProperties load(allscale::utils::ArchiveReader& var_0);
};

struct IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13 {
    int32_t capture_num_frames;
    IMP_ipic3d_colon__colon_UniverseProperties capture_config;
    double capture_v_mod;
    int32_t capture_B;
    int32_t capture_N;
    double capture_e;
    double capture_m;
    int32_t capture_T;
    int32_t capture_S;;
    ;
    ;
    IMP_ParticleCount operator()(int32_t p2, int32_t p3) const;
    void store(allscale::utils::ArchiveWriter& p2) const;
    static IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13 load(allscale::utils::ArchiveReader& var_0);
};

struct IMP_ParticleCount {
    int32_t num_frames;
    allscale::utils::Vector<long, 3 > size;
    std::vector<uint32_t, std::allocator<uint32_t > > counts;;
    IMP_ParticleCount();
    IMP_ParticleCount(IMP_ParticleCount&& p2) = default;
    IMP_ParticleCount(int32_t p2, allscale::utils::Vector<long, 3 > const& p3);
    IMP_ParticleCount(int32_t&& p2, allscale::utils::Vector<long, 3 >&& p3, std::vector<uint32_t, std::allocator<uint32_t > >&& p4, DummyCtorParamType p5);
    ~IMP_ParticleCount() = default;
    IMP_ParticleCount& operator=(IMP_ParticleCount&& p2) = default;
    IMP_ParticleCount& operator+=(IMP_ParticleCount const& p2);
    uint64_t flatten(int32_t p2, int32_t p3, int32_t p4, int32_t p5) const;
    uint32_t get(int32_t p2, int32_t p3, int32_t p4, int32_t p5) const;
    void increment(int32_t p2, allscale::utils::Vector<long, 3 > const& p3, int32_t p4);
    void IMP_increment(int32_t p2, int32_t p3, int32_t p4, int32_t p5, int32_t p6);
    void store(allscale::utils::ArchiveWriter& p2) const;
    IMP_ParticleCount& operator=(IMP_ParticleCount const& p2) = default;
    static IMP_ParticleCount load(allscale::utils::ArchiveReader& var_0);
};

struct allscale_type_125;
typedef struct allscale_type_125 allscale_type_125;

struct allscale_type_125 {
    char data[15];;
};

template<> struct is_allscale_fixed_sized_array<allscale_type_125> : public std::true_type {};
template<> struct to_std_array_type<allscale_type_125> { using type = std::array<char,15u>; };

struct IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16;
typedef struct IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16 IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16;

typedef IMP_ParticleCount allscale_type_529(IMP_ParticleCount&&,IMP_ParticleCount const&);

typedef allscale_type_529* allscale_type_530;

struct IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16 {
    operator allscale_type_530() const;
    ;
    ;
    IMP_ParticleCount operator()(IMP_ParticleCount&& p2, IMP_ParticleCount const& p3) const;
    void store(allscale::utils::ArchiveWriter& p2) const;
    static IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16 load(allscale::utils::ArchiveReader& var_0);
};

ALLSCALE_REGISTER_TREETURE_TYPE(IMP_ParticleCount)
struct IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_fragments_int;
typedef struct IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_fragments_int IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_fragments_int;

struct IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int;
typedef struct IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int;

struct IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int {
    int32_t _begin;
    int32_t _end;;
    IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int();
    IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int(IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int const& p2) = default;
    IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int(IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int&& p2) = default;
    IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int(int32_t const& p2, int32_t const& p3);
    IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int(int32_t&& p2, int32_t&& p3, DummyCtorParamType p4);
    ~IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int() = default;
    bool IMP_empty_returns_bool() const;
    uint64_t IMP_size_returns_size_t() const;
    IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int& operator=(IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int const& p2) = default;
    IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int& operator=(IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int&& p2) = default;
    int32_t const& begin_returns_constint() const;
    bool covers_returns_bool(IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int const& p2) const;
    int32_t const& end_returns_constint() const;
    IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int grow_returns_allscaleapiuseralgorithmdetailrangeint(IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int const& p2, int32_t p3) const;
    IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int shrink_returns_allscaleapiuseralgorithmdetailrangeint(int32_t p2) const;
    IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_fragments_int split_returns_fragmentsint(uint64_t p2) const;
    void store(allscale::utils::ArchiveWriter& p2) const;
    static IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int load(allscale::utils::ArchiveReader& var_0);
};

struct IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3;
typedef struct IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3 IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3;

struct IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3 {
    uint64_t depth;
    IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int range;;
    ;
    ;
    void store(allscale::utils::ArchiveWriter& p2) const;
    static IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3 load(allscale::utils::ArchiveReader& var_0);
};

struct __wi_allscale_wi_1_can_split;
typedef struct __wi_allscale_wi_1_can_split __wi_allscale_wi_1_can_split;

struct __wi_allscale_wi_1_variant_0;
typedef struct __wi_allscale_wi_1_variant_0 __wi_allscale_wi_1_variant_0;

struct __wi_allscale_wi_1_name {
    static const char* name() { return "__wi_allscale_wi_1"; }
};

struct __wi_allscale_wi_1_variant_1;
typedef struct __wi_allscale_wi_1_variant_1 __wi_allscale_wi_1_variant_1;

using __wi_allscale_wi_1_work = allscale::work_item_description<IMP_ParticleCount, __wi_allscale_wi_1_name, allscale::do_serialization, __wi_allscale_wi_1_variant_0, __wi_allscale_wi_1_variant_1, __wi_allscale_wi_1_can_split >;

/* ------- Function Definitions --------- */
allscale::treeture<IMP_ParticleCount > allscale_fun_633(allscale::runtime::dependencies const& var_0, hpx::util::tuple<IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16 > const& var_1) {
    return allscale::spawn_first_with_dependencies<__wi_allscale_wi_1_work >(var_0, hpx::util::get<0 >(var_1), hpx::util::get<1 >(var_1), hpx::util::get<2 >(var_1));
}
/* ------- Function Definitions --------- */
allscale::treeture<IMP_ParticleCount > IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_preduce_int__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_returns_core_colon__colon_treeture_lt_typename_space_utils_colon__colon_lambda_traits_lt__lparen_lambda_space_at_space__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_colon_256_colon_16_rparen__gt__colon__colon_result_type_gt_(int32_t const& var_0, int32_t const& var_1, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13 const& var_2, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16 const& var_3) {
    return allscale::runtime::make_prec_operation<IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3, IMP_ParticleCount >((hpx::util::tuple<IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16 > const&)INS_INIT(hpx::util::tuple<IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16 >){var_2, var_3}, &allscale_fun_633)((IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3 const&)INS_INIT(IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3){(uint64_t)0, (IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int&&)IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int{var_0, var_1}});
}
struct allscale_type_36;
typedef struct allscale_type_36 allscale_type_36;

struct allscale_type_36 {
    char data[2];;
};

template<> struct is_allscale_fixed_sized_array<allscale_type_36> : public std::true_type {};
template<> struct to_std_array_type<allscale_type_36> { using type = std::array<char,2u>; };

struct allscale_type_13;
typedef struct allscale_type_13 allscale_type_13;

struct allscale_type_13 {
    char data[18];;
};

template<> struct is_allscale_fixed_sized_array<allscale_type_13> : public std::true_type {};
template<> struct to_std_array_type<allscale_type_13> { using type = std::array<char,18u>; };

struct allscale_type_12;
typedef struct allscale_type_12 allscale_type_12;

struct allscale_type_12 {
    char data[16];;
};

template<> struct is_allscale_fixed_sized_array<allscale_type_12> : public std::true_type {};
template<> struct to_std_array_type<allscale_type_12> { using type = std::array<char,16u>; };

struct allscale_type_652;
typedef struct allscale_type_652 allscale_type_652;

struct allscale_type_652 {
    char data[20];;
};

template<> struct is_allscale_fixed_sized_array<allscale_type_652> : public std::true_type {};
template<> struct to_std_array_type<allscale_type_652> { using type = std::array<char,20u>; };

struct allscale_type_657;
typedef struct allscale_type_657 allscale_type_657;

struct allscale_type_657 {
    char data[13];;
};

template<> struct is_allscale_fixed_sized_array<allscale_type_657> : public std::true_type {};
template<> struct to_std_array_type<allscale_type_657> { using type = std::array<char,13u>; };

struct allscale_type_80;
typedef struct allscale_type_80 allscale_type_80;

struct allscale_type_80 {
    char data[17];;
};

template<> struct is_allscale_fixed_sized_array<allscale_type_80> : public std::true_type {};
template<> struct to_std_array_type<allscale_type_80> { using type = std::array<char,17u>; };

struct allscale_type_40;
typedef struct allscale_type_40 allscale_type_40;

struct allscale_type_40 {
    char data[3];;
};

template<> struct is_allscale_fixed_sized_array<allscale_type_40> : public std::true_type {};
template<> struct to_std_array_type<allscale_type_40> { using type = std::array<char,3u>; };

/* ------- Function Definitions --------- */
int32_t IMP_main(int32_t var_0, char** var_1) {
    int32_t var_2 = 100 * 1000;
    int32_t var_3 = 150;
    int32_t var_4 = 10;
    int32_t var_5 = 64;
    int32_t var_6 = 1;
    if (var_0 > 1) {
        var_2 = atoi(var_1[1]);
    };
    if (var_0 > 2) {
        var_3 = atoi(var_1[2]);
    };
    if (var_0 > 3) {
        var_4 = atoi(var_1[3]);
    };
    if (var_0 > 4) {
        var_5 = atoi(var_1[4]);
    };
    if (var_0 > 5) {
        var_6 = atoi(var_1[5]);
    };
    int32_t var_7 = var_3 / var_4 + 1;
    std::cout << "----- particle-in-cell tracer -----\n";
    std::cout << "Tracing " << var_2 << " particles for " << var_3 << " time steps in a " << var_5 << "^3 grid recording a snapshot every " << var_4 << " time steps";
    if (var_6 == 1) {
        std::cout << " ...\n";
    } else {
        std::cout << var_6 << " time(s) ...\n";
    };
    IMP_ipic3d_colon__colon_UniverseProperties var_8{(ipic3dUseCaseDipole), (allscale::utils::Vector<long, 3 >{(int64_t)1, (int64_t)1, (int64_t)1}), (allscale::utils::Vector<double, 3 >{1.0E+0, 1.0E+0, 1.0E+0}), (1.0E+0), (1.0E+0), (0.0E+0), (allscale::utils::Vector<double, 3 >{0.0E+0, 0.0E+0, 0.0E+0}), (allscale::utils::Vector<double, 3 >{0.0E+0, 0.0E+0, 0.0E+0}), (allscale::utils::Vector<double, 3 >{(double)0, (double)0, (double)0}), (100), (100)};
    var_8.dt = 1.0E-2;
    var_8.speedOfLight = (double)299792458;
    var_8.size = allscale::utils::Vector<long, 3 >{(int64_t)var_5, (int64_t)var_5, (int64_t)var_5};
    var_8.planetRadius = (double)6378137;
    var_8.cellWidth = allscale::utils::Vector<double, 3 >{2.0E+1 / (double)var_8.size.x * var_8.planetRadius};
    var_8.FieldOutputCycle = 0;
    var_8.objectCenter = allscale::utils::Vector<double, 3 >{0.0E+0, 0.0E+0, 0.0E+0};
    var_8.origin.x = var_8.objectCenter.x - (double)var_8.size.x * var_8.cellWidth.x / 2.0E+0;
    var_8.origin.y = var_8.objectCenter.y - (double)var_8.size.y * var_8.cellWidth.y / 2.0E+0;
    var_8.origin.z = var_8.objectCenter.z - (double)var_8.size.z * var_8.cellWidth.z / 2.0E+0;
    var_8.externalMagneticField = allscale::utils::Vector<double, 3 >{0.0E+0, 0.0E+0, 3.0700000000000001E-5};
    var_8.useCase = ipic3dUseCaseDipole;
    int32_t var_9 = std::max(1000, var_2 / 1000);
    double var_10 = 1.602176565E-19;
    double var_11 = 1.0E+7 * var_10;
    double var_12 = 1.6726217770000001E-27;
    double var_13 = var_8.speedOfLight / sqrt(1.0E+0 + var_12 * var_8.speedOfLight * var_8.speedOfLight / var_11);
    IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13 var_14 = (IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13&&)INS_INIT(IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13){var_7, (IMP_ipic3d_colon__colon_UniverseProperties const&)var_8, var_13, var_9, var_2, var_10, var_12, var_3, var_4};
    IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16 var_15 = (IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16&&)INS_INIT(IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16){};
    IMP_ParticleCount var_16{(var_7), (var_8.size)};
    {
        for (int32_t var_17 = 0; var_17 < var_6; ++var_17) {
            {
                if (var_6 > 1) {
                    std::cout << "Processing batch " << var_17 + 1 << "/" << var_6 << " ..\n";
                };
                std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<int64_t, std::ratio<1, 1000000000 > > > var_18 = (std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<int64_t, std::ratio<1, 1000000000 > > >&&)std::chrono::_V2::system_clock::now();
                var_16.operator+=(IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_preduce_int__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_returns_core_colon__colon_treeture_lt_typename_space_utils_colon__colon_lambda_traits_lt__lparen_lambda_space_at_space__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_colon_256_colon_16_rparen__gt__colon__colon_result_type_gt_(0, var_2 / var_9 + 1, var_14, var_15).get_result());
                std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<int64_t, std::ratio<1, 1000000000 > > > var_19 = (std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<int64_t, std::ratio<1, 1000000000 > > >&&)std::chrono::_V2::system_clock::now();
                std::cout << "Simulation Finished" << &std::endl;
                double var_20 = (double)std::chrono::duration_cast<std::chrono::duration<int64_t, std::ratio<1, 1000000000 > >, int64_t, std::ratio<1, 1000000000 > >((var_19 - var_18)).count() / 1.0E+9;
                std::cout << "Simulation took " << var_20 << "s\n";
                std::cout << "Throughput: " << (double)(var_3 + 1) * (double)var_2 / var_20 << " particles/s \n";
            };
        };
    };
    if (false) {	// disable output
        int64_t var_21 = std::chrono::duration_cast<std::chrono::duration<int64_t, std::ratio<1, 1000 > >, int64_t, std::ratio<1, 1000000000 > >(std::chrono::_V2::steady_clock::now().time_since_epoch()).count();
        {
            for (int32_t var_22 = 0; var_22 < var_7; ++var_22) {
                {
                    allscale_type_48 var_23;
                    sprintf(var_23.data, "result_%ld.csv.%06d", var_21, var_22);
                    std::basic_fstream<char, std::char_traits<char > > var_24 = (std::basic_fstream<char, std::char_traits<char > >&&)std::basic_fstream<char, std::char_traits<char > >{var_23.data, std::ios_base::out};
                    *(std::basic_ostream<char, std::char_traits<char > >*)(&var_24) << "t,x,y,z,density\n";
                    {
                        int32_t var_25 = 0;
                        while ((int64_t)var_25 < var_8.size.x) {
                            {
                                int32_t var_26 = 0;
                                while ((int64_t)var_26 < var_8.size.y) {
                                    {
                                        int32_t var_27 = 0;
                                        while ((int64_t)var_27 < var_8.size.z) {
                                            {
                                                double var_28 = (double)var_25 * var_8.cellWidth.x;
                                                double var_29 = (double)var_26 * var_8.cellWidth.y;
                                                double var_30 = (double)var_27 * var_8.cellWidth.z;
                                                *(std::basic_ostream<char, std::char_traits<char > >*)(&var_24) << var_22 << "," << var_28 << "," << var_29 << "," << var_30 << "," << var_16.get(var_22, var_25, var_26, var_27) << "\n";
                                            };
                                            var_27++;
                                        };
                                    };
                                    var_26++;
                                };
                            };
                            var_25++;
                        };
                    };
                };
            };
        };
    };
    return 0;
}
/* ------- Function Definitions --------- */
allscale::treeture<int32_t > allscale_fun_3(hpx::util::tuple<int32_t, char** > const& var_0) {
    return allscale::treeture<int32_t >(IMP_main(hpx::util::get<0 >(var_0), hpx::util::get<1 >(var_0)));
}
struct __wi_main_variant_0 {
    static allscale::treeture<int32_t > execute(hpx::util::tuple<int32_t, char** > const& var_0);
    static constexpr bool valid = true;
};

struct IMP_ipic3d_colon__colon_Parameters {
    double c;
    double dt;
    uint64_t ncycles;
    allscale::utils::Vector<double, 3 > L;
    allscale::utils::Vector<double, 3 > objectCenter;
    double planetRadius;
    allscale::utils::Vector<int, 3 > ncells;
    allscale::utils::Vector<double, 3 > dspace;
    int32_t ns;
    std::vector<int32_t, std::allocator<int32_t > > npcelx;
    std::vector<int32_t, std::allocator<int32_t > > npcely;
    std::vector<int32_t, std::allocator<int32_t > > npcelz;
    std::vector<double, std::allocator<double > > qom;
    std::vector<double, std::allocator<double > > rhoInit;
    std::vector<double, std::allocator<double > > uth;
    std::vector<double, std::allocator<double > > vth;
    std::vector<double, std::allocator<double > > wth;
    std::vector<double, std::allocator<double > > u0;
    std::vector<double, std::allocator<double > > v0;
    std::vector<double, std::allocator<double > > w0;
    ipic3dUseCase useCase;
    std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > wmethod;
    std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > SimName;
    std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > PoissonCorrection;
    std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > SaveDirName;
    double delta;
    allscale::utils::Vector<double, 3 > B0;
    allscale::utils::Vector<double, 3 > B1;
    int32_t FieldOutputCycle;
    std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > FieldOutputTag;
    std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > MomentsOutputTag;
    int32_t ParticlesOutputCycle;
    std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > ParticlesOutputTag;
    std::vector<int32_t, std::allocator<int32_t > > bcEx;
    std::vector<int32_t, std::allocator<int32_t > > bcEy;
    std::vector<int32_t, std::allocator<int32_t > > bcEz;
    std::vector<int32_t, std::allocator<int32_t > > bcBx;
    std::vector<int32_t, std::allocator<int32_t > > bcBy;
    std::vector<int32_t, std::allocator<int32_t > > bcBz;
    allscale::utils::Vector<int, 3 > bcPfaceRight;
    allscale::utils::Vector<int, 3 > bcPfaceLeft;
    allscale::utils::Vector<int, 3 > bcPHIfaceRight;
    allscale::utils::Vector<int, 3 > bcPHIfaceLeft;
    allscale::utils::Vector<int, 3 > bcEMfaceRight;
    allscale::utils::Vector<int, 3 > bcEMfaceLeft;;
    IMP_ipic3d_colon__colon_Parameters(std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > p2);
    IMP_ipic3d_colon__colon_Parameters(IMP_ipic3d_colon__colon_Parameters const& p2) = default;
    IMP_ipic3d_colon__colon_Parameters(IMP_ipic3d_colon__colon_Parameters&& p2) = default;
    IMP_ipic3d_colon__colon_Parameters(double&& p2, double&& p3, uint64_t&& p4, allscale::utils::Vector<double, 3 >&& p5, allscale::utils::Vector<double, 3 >&& p6, double&& p7, allscale::utils::Vector<int, 3 >&& p8, allscale::utils::Vector<double, 3 >&& p9, int32_t&& p10, std::vector<int32_t, std::allocator<int32_t > >&& p11, std::vector<int32_t, std::allocator<int32_t > >&& p12, std::vector<int32_t, std::allocator<int32_t > >&& p13, std::vector<double, std::allocator<double > >&& p14, std::vector<double, std::allocator<double > >&& p15, std::vector<double, std::allocator<double > >&& p16, std::vector<double, std::allocator<double > >&& p17, std::vector<double, std::allocator<double > >&& p18, std::vector<double, std::allocator<double > >&& p19, std::vector<double, std::allocator<double > >&& p20, std::vector<double, std::allocator<double > >&& p21, ipic3dUseCase&& p22, std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&& p23, std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&& p24, std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&& p25, std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&& p26, double&& p27, allscale::utils::Vector<double, 3 >&& p28, allscale::utils::Vector<double, 3 >&& p29, int32_t&& p30, std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&& p31, std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&& p32, int32_t&& p33, std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&& p34, std::vector<int32_t, std::allocator<int32_t > >&& p35, std::vector<int32_t, std::allocator<int32_t > >&& p36, std::vector<int32_t, std::allocator<int32_t > >&& p37, std::vector<int32_t, std::allocator<int32_t > >&& p38, std::vector<int32_t, std::allocator<int32_t > >&& p39, std::vector<int32_t, std::allocator<int32_t > >&& p40, allscale::utils::Vector<int, 3 >&& p41, allscale::utils::Vector<int, 3 >&& p42, allscale::utils::Vector<int, 3 >&& p43, allscale::utils::Vector<int, 3 >&& p44, allscale::utils::Vector<int, 3 >&& p45, allscale::utils::Vector<int, 3 >&& p46, DummyCtorParamType p47);
    IMP_ipic3d_colon__colon_Parameters() = default;
    ~IMP_ipic3d_colon__colon_Parameters() = default;
    std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > IMP_split(std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > const& p2, std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > p3);
    IMP_ipic3d_colon__colon_Parameters& operator=(IMP_ipic3d_colon__colon_Parameters const& p2) = default;
    IMP_ipic3d_colon__colon_Parameters& operator=(IMP_ipic3d_colon__colon_Parameters&& p2) = default;
    void store(allscale::utils::ArchiveWriter& p2) const;
    static IMP_ipic3d_colon__colon_Parameters load(allscale::utils::ArchiveReader& var_0);
};

struct DummyCtorParamType {
    ;
    ;
};

/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
struct allscale_type_115;
typedef struct allscale_type_115 allscale_type_115;

struct allscale_type_115 {
    char data[8];;
};

template<> struct is_allscale_fixed_sized_array<allscale_type_115> : public std::true_type {};
template<> struct to_std_array_type<allscale_type_115> { using type = std::array<char,8u>; };

struct allscale_type_141;
typedef struct allscale_type_141 allscale_type_141;

struct allscale_type_141 {
    char data[21];;
};

template<> struct is_allscale_fixed_sized_array<allscale_type_141> : public std::true_type {};
template<> struct to_std_array_type<allscale_type_141> { using type = std::array<char,21u>; };

struct allscale_type_112;
typedef struct allscale_type_112 allscale_type_112;

struct allscale_type_112 {
    char data[4];;
};

template<> struct is_allscale_fixed_sized_array<allscale_type_112> : public std::true_type {};
template<> struct to_std_array_type<allscale_type_112> { using type = std::array<char,4u>; };

struct allscale_type_121;
typedef struct allscale_type_121 allscale_type_121;

struct allscale_type_121 {
    char data[7];;
};

template<> struct is_allscale_fixed_sized_array<allscale_type_121> : public std::true_type {};
template<> struct to_std_array_type<allscale_type_121> { using type = std::array<char,7u>; };

struct allscale_type_142;
typedef struct allscale_type_142 allscale_type_142;

struct allscale_type_142 {
    char data[19];;
};

template<> struct is_allscale_fixed_sized_array<allscale_type_142> : public std::true_type {};
template<> struct to_std_array_type<allscale_type_142> { using type = std::array<char,19u>; };

/* ------- Function Definitions --------- */
IMP_ipic3d_colon__colon_Parameters::IMP_ipic3d_colon__colon_Parameters(std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > var_1) : c(1.0E+0), L(), objectCenter(), ncells(), dspace(), npcelx(), npcely(), npcelz(), qom(), rhoInit(), uth(), vth(), wth(), u0(), v0(), w0(), wmethod(), SimName(), PoissonCorrection(), SaveDirName(), B0(), B1(), FieldOutputTag(), MomentsOutputTag(), ParticlesOutputTag(), bcEx(), bcEy(), bcEz(), bcBx(), bcBy(), bcBz(), bcPfaceRight(), bcPfaceLeft(), bcPHIfaceRight(), bcPHIfaceLeft(), bcEMfaceRight(), bcEMfaceLeft() {
    std::basic_ifstream<char, std::char_traits<char > > var_2{(var_1), (std::ios_base::in)};
    if (!*(std::basic_ios<char, std::char_traits<char > >*)(&var_2)) {
        std::cerr << "File not found: " << var_1 << &std::endl;
        exit(1);
    };
    std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > var_3;
    while (!(*(std::basic_ios<char, std::char_traits<char > >*)(&std::getline(*(std::basic_istream<char, std::char_traits<char > >*)(&var_2), var_3))).eof()) {
        var_3 = var_3.substr((uint64_t)0, var_3.find("#", (uint64_t)0));
        if (var_3.find("=", (uint64_t)0) == std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            continue;
        };
        if (var_3.find("dt", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            (*this).dt = std::__cxx11::stod((*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}}).back(), (uint64_t*)0);
            continue;
        };
        if (var_3.find("ncycles", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            (*this).ncycles = (uint64_t)std::__cxx11::stoull((*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}}).back(), (uint64_t*)0, 10);
            continue;
        };
        if (var_3.find("Lx", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            (*this).L.x = std::__cxx11::stod((*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}}).back(), (uint64_t*)0);
            continue;
        };
        if (var_3.find("Ly", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            (*this).L.y = std::__cxx11::stod((*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}}).back(), (uint64_t*)0);
            continue;
        };
        if (var_3.find("Lz", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            (*this).L.z = std::__cxx11::stod((*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}}).back(), (uint64_t*)0);
            continue;
        };
        if (var_3.find("x_center", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            (*this).objectCenter.x = std::__cxx11::stod((*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}}).back(), (uint64_t*)0);
            continue;
        };
        if (var_3.find("y_center", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            (*this).objectCenter.y = std::__cxx11::stod((*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}}).back(), (uint64_t*)0);
            continue;
        };
        if (var_3.find("z_center", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            (*this).objectCenter.z = std::__cxx11::stod((*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}}).back(), (uint64_t*)0);
            continue;
        };
        if (var_3.find("L_square", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            (*this).planetRadius = std::__cxx11::stod((*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}}).back(), (uint64_t*)0);
            continue;
        };
        if (var_3.find("delta", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            (*this).delta = std::__cxx11::stod((*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}}).back(), (uint64_t*)0);
            continue;
        };
        if (var_3.find("nxc", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            (*this).ncells.x = std::__cxx11::stoi((*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}}).back(), (uint64_t*)0, 10);
            continue;
        };
        if (var_3.find("nyc", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            (*this).ncells.y = std::__cxx11::stoi((*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}}).back(), (uint64_t*)0, 10);
            continue;
        };
        if (var_3.find("nzc", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            (*this).ncells.z = std::__cxx11::stoi((*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}}).back(), (uint64_t*)0, 10);
            continue;
        };
        if (var_3.find("B0x", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            (*this).B0.x = std::__cxx11::stod((*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}}).back(), (uint64_t*)0);
            continue;
        };
        if (var_3.find("B0y", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            (*this).B0.y = std::__cxx11::stod((*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}}).back(), (uint64_t*)0);
            continue;
        };
        if (var_3.find("B0z", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            (*this).B0.z = std::__cxx11::stod((*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}}).back(), (uint64_t*)0);
            continue;
        };
        if (var_3.find("B1x", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            (*this).B1.x = std::__cxx11::stod((*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}}).back(), (uint64_t*)0);
            continue;
        };
        if (var_3.find("B1y", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            (*this).B1.y = std::__cxx11::stod((*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}}).back(), (uint64_t*)0);
            continue;
        };
        if (var_3.find("B1z", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            (*this).B1.z = std::__cxx11::stod((*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}}).back(), (uint64_t*)0);
            continue;
        };
        if (var_3.find("Case", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            if ((*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}}).back().compare("Dipole") == 0) {
                (*this).useCase = ipic3dUseCaseDipole;
            } else {
                (*this).useCase = ipic3dUseCaseTest;
            };
            continue;
        };
        if (var_3.find("SaveDirName", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            (*this).SaveDirName = (*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}}).back();
            continue;
        };
        if (var_3.find("PoissonCorrection", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            (*this).PoissonCorrection = (*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}}).back();
            continue;
        };
        if (var_3.find("WriteMethod", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            (*this).wmethod = (*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}}).back();
            continue;
        };
        if (var_3.find("SimulationName", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            (*this).SimName = (*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}}).back();
            continue;
        };
        if (var_3.find("ns = ", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            (*this).ns = std::__cxx11::stoi((*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}}).back(), (uint64_t*)0, 10);
            continue;
        };
        if (var_3.find("npcelx", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > var_4 = (std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > >&&)(*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}});
            {
                __gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > > var_5 = (__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > >&&)(var_4.cbegin() + (int64_t)2);
                while (var_5 != var_4.cend()) {
                    (*this).npcelx.push_back(std::__cxx11::stoi(var_5.operator*(), (uint64_t*)0, 10));
                    var_5.operator++();
                };
            };
            continue;
        };
        if (var_3.find("npcely", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > var_6 = (std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > >&&)(*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}});
            {
                __gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > > var_7 = (__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > >&&)(var_6.cbegin() + (int64_t)2);
                while (var_7 != var_6.cend()) {
                    (*this).npcely.push_back(std::__cxx11::stoi(var_7.operator*(), (uint64_t*)0, 10));
                    var_7.operator++();
                };
            };
            continue;
        };
        if (var_3.find("npcelz", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > var_8 = (std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > >&&)(*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}});
            {
                __gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > > var_9 = (__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > >&&)(var_8.cbegin() + (int64_t)2);
                while (var_9 != var_8.cend()) {
                    (*this).npcelz.push_back(std::__cxx11::stoi(var_9.operator*(), (uint64_t*)0, 10));
                    var_9.operator++();
                };
            };
            continue;
        };
        if (var_3.find("qom", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > var_10 = (std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > >&&)(*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}});
            {
                __gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > > var_11 = (__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > >&&)(var_10.cbegin() + (int64_t)2);
                while (var_11 != var_10.cend()) {
                    (*this).qom.push_back(std::__cxx11::stod(var_11.operator*(), (uint64_t*)0));
                    var_11.operator++();
                };
            };
            continue;
        };
        if (var_3.find("rhoINIT", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > var_12 = (std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > >&&)(*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}});
            {
                __gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > > var_13 = (__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > >&&)(var_12.cbegin() + (int64_t)2);
                while (var_13 != var_12.cend()) {
                    (*this).rhoInit.push_back(std::__cxx11::stod(var_13.operator*(), (uint64_t*)0));
                    var_13.operator++();
                };
            };
            continue;
        };
        if (var_3.find("uth", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > var_14 = (std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > >&&)(*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}});
            {
                __gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > > var_15 = (__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > >&&)(var_14.cbegin() + (int64_t)2);
                while (var_15 != var_14.cend()) {
                    (*this).uth.push_back(std::__cxx11::stod(var_15.operator*(), (uint64_t*)0));
                    var_15.operator++();
                };
            };
            continue;
        };
        if (var_3.find("vth", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > var_16 = (std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > >&&)(*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}});
            {
                __gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > > var_17 = (__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > >&&)(var_16.cbegin() + (int64_t)2);
                while (var_17 != var_16.cend()) {
                    (*this).vth.push_back(std::__cxx11::stod(var_17.operator*(), (uint64_t*)0));
                    var_17.operator++();
                };
            };
            continue;
        };
        if (var_3.find("wth", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > var_18 = (std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > >&&)(*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}});
            {
                __gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > > var_19 = (__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > >&&)(var_18.cbegin() + (int64_t)2);
                while (var_19 != var_18.cend()) {
                    (*this).wth.push_back(std::__cxx11::stod(var_19.operator*(), (uint64_t*)0));
                    var_19.operator++();
                };
            };
            continue;
        };
        if (var_3.find("u0", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > var_20 = (std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > >&&)(*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}});
            {
                __gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > > var_21 = (__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > >&&)(var_20.cbegin() + (int64_t)2);
                while (var_21 != var_20.cend()) {
                    (*this).u0.push_back(std::__cxx11::stod(var_21.operator*(), (uint64_t*)0));
                    var_21.operator++();
                };
            };
            continue;
        };
        if (var_3.find("v0", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > var_22 = (std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > >&&)(*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}});
            {
                __gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > > var_23 = (__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > >&&)(var_22.cbegin() + (int64_t)2);
                while (var_23 != var_22.cend()) {
                    (*this).v0.push_back(std::__cxx11::stod(var_23.operator*(), (uint64_t*)0));
                    var_23.operator++();
                };
            };
            continue;
        };
        if (var_3.find("w0", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > var_24 = (std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > >&&)(*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}});
            {
                __gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > > var_25 = (__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > >&&)(var_24.cbegin() + (int64_t)2);
                while (var_25 != var_24.cend()) {
                    (*this).w0.push_back(std::__cxx11::stod(var_25.operator*(), (uint64_t*)0));
                    var_25.operator++();
                };
            };
            continue;
        };
        if (var_3.find("FieldOutputCycle", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            (*this).FieldOutputCycle = std::__cxx11::stoi((*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}}).back(), (uint64_t*)0, 10);
            continue;
        };
        if (var_3.find("FieldOutputTag", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            (*this).FieldOutputTag = (*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}}).back();
            continue;
        };
        if (var_3.find("MomentsOutputTag", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            (*this).MomentsOutputTag = (*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}}).back();
            continue;
        };
        if (var_3.find("ParticlesOutputCycle", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            (*this).ParticlesOutputCycle = std::__cxx11::stoi((*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}}).back(), (uint64_t*)0, 10);
            continue;
        };
        if (var_3.find("ParticlesOutputTag", (uint64_t)0) != std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::npos) {
            (*this).ParticlesOutputTag = (*this).IMP_split(var_3, (std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&&)std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >{"\\s+", std::allocator<char >{}}).back();
            continue;
        };
    };
    (*this).dspace.x = (*this).L.x / (double)(*this).ncells.x;
    (*this).dspace.y = (*this).L.y / (double)(*this).ncells.y;
    (*this).dspace.z = (*this).L.z / (double)(*this).ncells.z;
    var_2.close();
}
/* ------- Function Definitions --------- */
std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > IMP_ipic3d_colon__colon_Parameters::IMP_split(std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > const& var_1, std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > var_2) {
    std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > > var_3;
    std::__cxx11::basic_regex<char, std::__cxx11::regex_traits<char > > var_4{(var_2), (std::__cxx11::basic_regex<char, std::__cxx11::regex_traits<char> >::ECMAScript)};
    std::__cxx11::regex_token_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > >, char, std::__cxx11::regex_traits<char > > var_5{((__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > >&&)var_1.begin()), ((__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > >&&)var_1.end()), (var_4), (-1), (std::regex_constants::match_default)};
    std::__cxx11::regex_token_iterator<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > >, char, std::__cxx11::regex_traits<char > > var_6;
    {
        while (var_5 != var_6) {
            var_3.push_back(var_5.operator*());
            var_5.operator++();
        };
    };
    return (std::vector<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > > >&&)var_3;
}
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
IMP_ipic3d_colon__colon_Parameters IMP_ipic3d_colon__colon_Parameters::load(allscale::utils::ArchiveReader& var_0) {
    double var_1 = var_0.read<double >();
    double var_2 = var_0.read<double >();
    uint64_t pos = var_0.read<uint64_t >();
    allscale::utils::Vector<double, 3 > var_4 = var_0.read<allscale::utils::Vector<double, 3 > >();
    allscale::utils::Vector<double, 3 > var_5 = var_0.read<allscale::utils::Vector<double, 3 > >();
    double var_6 = var_0.read<double >();
    allscale::utils::Vector<int, 3 > var_7 = var_0.read<allscale::utils::Vector<int, 3 > >();
    allscale::utils::Vector<double, 3 > var_8 = var_0.read<allscale::utils::Vector<double, 3 > >();
    int32_t var_9 = var_0.read<int32_t >();
    std::vector<int32_t, std::allocator<int32_t > > var_10 = var_0.read<std::vector<int32_t, std::allocator<int32_t > > >();
    std::vector<int32_t, std::allocator<int32_t > > var_11 = var_0.read<std::vector<int32_t, std::allocator<int32_t > > >();
    std::vector<int32_t, std::allocator<int32_t > > var_12 = var_0.read<std::vector<int32_t, std::allocator<int32_t > > >();
    std::vector<double, std::allocator<double > > var_13 = var_0.read<std::vector<double, std::allocator<double > > >();
    std::vector<double, std::allocator<double > > var_14 = var_0.read<std::vector<double, std::allocator<double > > >();
    std::vector<double, std::allocator<double > > var_15 = var_0.read<std::vector<double, std::allocator<double > > >();
    std::vector<double, std::allocator<double > > var_16 = var_0.read<std::vector<double, std::allocator<double > > >();
    std::vector<double, std::allocator<double > > var_17 = var_0.read<std::vector<double, std::allocator<double > > >();
    std::vector<double, std::allocator<double > > var_18 = var_0.read<std::vector<double, std::allocator<double > > >();
    std::vector<double, std::allocator<double > > var_19 = var_0.read<std::vector<double, std::allocator<double > > >();
    std::vector<double, std::allocator<double > > var_20 = var_0.read<std::vector<double, std::allocator<double > > >();
    ipic3dUseCase var_21 = var_0.read<ipic3dUseCase >();
    std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > var_22 = var_0.read<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > >();
    std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > var_23 = var_0.read<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > >();
    std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > var_24 = var_0.read<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > >();
    std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > var_25 = var_0.read<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > >();
    double var_26 = var_0.read<double >();
    allscale::utils::Vector<double, 3 > var_27 = var_0.read<allscale::utils::Vector<double, 3 > >();
    allscale::utils::Vector<double, 3 > var_28 = var_0.read<allscale::utils::Vector<double, 3 > >();
    int32_t var_29 = var_0.read<int32_t >();
    std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > var_30 = var_0.read<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > >();
    std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > var_31 = var_0.read<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > >();
    int32_t var_32 = var_0.read<int32_t >();
    std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > var_33 = var_0.read<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > >();
    std::vector<int32_t, std::allocator<int32_t > > var_34 = var_0.read<std::vector<int32_t, std::allocator<int32_t > > >();
    std::vector<int32_t, std::allocator<int32_t > > var_35 = var_0.read<std::vector<int32_t, std::allocator<int32_t > > >();
    std::vector<int32_t, std::allocator<int32_t > > var_36 = var_0.read<std::vector<int32_t, std::allocator<int32_t > > >();
    std::vector<int32_t, std::allocator<int32_t > > var_37 = var_0.read<std::vector<int32_t, std::allocator<int32_t > > >();
    std::vector<int32_t, std::allocator<int32_t > > var_38 = var_0.read<std::vector<int32_t, std::allocator<int32_t > > >();
    std::vector<int32_t, std::allocator<int32_t > > var_39 = var_0.read<std::vector<int32_t, std::allocator<int32_t > > >();
    allscale::utils::Vector<int, 3 > var_40 = var_0.read<allscale::utils::Vector<int, 3 > >();
    allscale::utils::Vector<int, 3 > var_41 = var_0.read<allscale::utils::Vector<int, 3 > >();
    allscale::utils::Vector<int, 3 > var_42 = var_0.read<allscale::utils::Vector<int, 3 > >();
    allscale::utils::Vector<int, 3 > var_43 = var_0.read<allscale::utils::Vector<int, 3 > >();
    allscale::utils::Vector<int, 3 > var_44 = var_0.read<allscale::utils::Vector<int, 3 > >();
    allscale::utils::Vector<int, 3 > var_45 = var_0.read<allscale::utils::Vector<int, 3 > >();
    DummyCtorParamType var_46;
    return {std::move(var_1), std::move(var_2), std::move(pos), std::move(var_4), std::move(var_5), std::move(var_6), std::move(var_7), std::move(var_8), std::move(var_9), std::move(var_10), std::move(var_11), std::move(var_12), std::move(var_13), std::move(var_14), std::move(var_15), std::move(var_16), std::move(var_17), std::move(var_18), std::move(var_19), std::move(var_20), std::move(var_21), std::move(var_22), std::move(var_23), std::move(var_24), std::move(var_25), std::move(var_26), std::move(var_27), std::move(var_28), std::move(var_29), std::move(var_30), std::move(var_31), std::move(var_32), std::move(var_33), std::move(var_34), std::move(var_35), std::move(var_36), std::move(var_37), std::move(var_38), std::move(var_39), std::move(var_40), std::move(var_41), std::move(var_42), std::move(var_43), std::move(var_44), std::move(var_45), var_46};
}
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
void IMP_ipic3d_colon__colon_Parameters::store(allscale::utils::ArchiveWriter& var_1) const {
    var_1.write<double >((*this).c);
    var_1.write<double >((*this).dt);
    var_1.write<uint64_t >((*this).ncycles);
    var_1.write<allscale::utils::Vector<double, 3 > >((*this).L);
    var_1.write<allscale::utils::Vector<double, 3 > >((*this).objectCenter);
    var_1.write<double >((*this).planetRadius);
    var_1.write<allscale::utils::Vector<int, 3 > >((*this).ncells);
    var_1.write<allscale::utils::Vector<double, 3 > >((*this).dspace);
    var_1.write<int32_t >((*this).ns);
    var_1.write<std::vector<int32_t, std::allocator<int32_t > > >((*this).npcelx);
    var_1.write<std::vector<int32_t, std::allocator<int32_t > > >((*this).npcely);
    var_1.write<std::vector<int32_t, std::allocator<int32_t > > >((*this).npcelz);
    var_1.write<std::vector<double, std::allocator<double > > >((*this).qom);
    var_1.write<std::vector<double, std::allocator<double > > >((*this).rhoInit);
    var_1.write<std::vector<double, std::allocator<double > > >((*this).uth);
    var_1.write<std::vector<double, std::allocator<double > > >((*this).vth);
    var_1.write<std::vector<double, std::allocator<double > > >((*this).wth);
    var_1.write<std::vector<double, std::allocator<double > > >((*this).u0);
    var_1.write<std::vector<double, std::allocator<double > > >((*this).v0);
    var_1.write<std::vector<double, std::allocator<double > > >((*this).w0);
    var_1.write<ipic3dUseCase >((*this).useCase);
    var_1.write<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > >((*this).wmethod);
    var_1.write<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > >((*this).SimName);
    var_1.write<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > >((*this).PoissonCorrection);
    var_1.write<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > >((*this).SaveDirName);
    var_1.write<double >((*this).delta);
    var_1.write<allscale::utils::Vector<double, 3 > >((*this).B0);
    var_1.write<allscale::utils::Vector<double, 3 > >((*this).B1);
    var_1.write<int32_t >((*this).FieldOutputCycle);
    var_1.write<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > >((*this).FieldOutputTag);
    var_1.write<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > >((*this).MomentsOutputTag);
    var_1.write<int32_t >((*this).ParticlesOutputCycle);
    var_1.write<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > >((*this).ParticlesOutputTag);
    var_1.write<std::vector<int32_t, std::allocator<int32_t > > >((*this).bcEx);
    var_1.write<std::vector<int32_t, std::allocator<int32_t > > >((*this).bcEy);
    var_1.write<std::vector<int32_t, std::allocator<int32_t > > >((*this).bcEz);
    var_1.write<std::vector<int32_t, std::allocator<int32_t > > >((*this).bcBx);
    var_1.write<std::vector<int32_t, std::allocator<int32_t > > >((*this).bcBy);
    var_1.write<std::vector<int32_t, std::allocator<int32_t > > >((*this).bcBz);
    var_1.write<allscale::utils::Vector<int, 3 > >((*this).bcPfaceRight);
    var_1.write<allscale::utils::Vector<int, 3 > >((*this).bcPfaceLeft);
    var_1.write<allscale::utils::Vector<int, 3 > >((*this).bcPHIfaceRight);
    var_1.write<allscale::utils::Vector<int, 3 > >((*this).bcPHIfaceLeft);
    var_1.write<allscale::utils::Vector<int, 3 > >((*this).bcEMfaceRight);
    var_1.write<allscale::utils::Vector<int, 3 > >((*this).bcEMfaceLeft);
}
/* ------- Function Definitions --------- */
IMP_ipic3d_colon__colon_Parameters::IMP_ipic3d_colon__colon_Parameters(double&& var_1, double&& var_2, uint64_t&& var_3, allscale::utils::Vector<double, 3 >&& var_4, allscale::utils::Vector<double, 3 >&& var_5, double&& var_6, allscale::utils::Vector<int, 3 >&& var_7, allscale::utils::Vector<double, 3 >&& var_8, int32_t&& var_9, std::vector<int32_t, std::allocator<int32_t > >&& var_10, std::vector<int32_t, std::allocator<int32_t > >&& var_11, std::vector<int32_t, std::allocator<int32_t > >&& var_12, std::vector<double, std::allocator<double > >&& var_13, std::vector<double, std::allocator<double > >&& var_14, std::vector<double, std::allocator<double > >&& var_15, std::vector<double, std::allocator<double > >&& var_16, std::vector<double, std::allocator<double > >&& var_17, std::vector<double, std::allocator<double > >&& var_18, std::vector<double, std::allocator<double > >&& var_19, std::vector<double, std::allocator<double > >&& var_20, ipic3dUseCase&& var_21, std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&& var_22, std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&& var_23, std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&& var_24, std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&& var_25, double&& var_26, allscale::utils::Vector<double, 3 >&& var_27, allscale::utils::Vector<double, 3 >&& var_28, int32_t&& var_29, std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&& var_30, std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&& var_31, int32_t&& var_32, std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&& var_33, std::vector<int32_t, std::allocator<int32_t > >&& var_34, std::vector<int32_t, std::allocator<int32_t > >&& var_35, std::vector<int32_t, std::allocator<int32_t > >&& var_36, std::vector<int32_t, std::allocator<int32_t > >&& var_37, std::vector<int32_t, std::allocator<int32_t > >&& var_38, std::vector<int32_t, std::allocator<int32_t > >&& var_39, allscale::utils::Vector<int, 3 >&& var_40, allscale::utils::Vector<int, 3 >&& var_41, allscale::utils::Vector<int, 3 >&& var_42, allscale::utils::Vector<int, 3 >&& var_43, allscale::utils::Vector<int, 3 >&& var_44, allscale::utils::Vector<int, 3 >&& var_45, DummyCtorParamType var_46) : c(var_1), dt(var_2), ncycles(var_3), L(var_4), objectCenter(var_5), planetRadius(var_6), ncells(var_7), dspace(var_8), ns(var_9), npcelx(var_10), npcely(var_11), npcelz(var_12), qom(var_13), rhoInit(var_14), uth(var_15), vth(var_16), wth(var_17), u0(var_18), v0(var_19), w0(var_20), useCase(var_21), wmethod(var_22), SimName(var_23), PoissonCorrection(var_24), SaveDirName(var_25), delta(var_26), B0(var_27), B1(var_28), FieldOutputCycle(var_29), FieldOutputTag(var_30), MomentsOutputTag(var_31), ParticlesOutputCycle(var_32), ParticlesOutputTag(var_33), bcEx(var_34), bcEy(var_35), bcEz(var_36), bcBx(var_37), bcBy(var_38), bcBz(var_39), bcPfaceRight(var_40), bcPfaceLeft(var_41), bcPHIfaceRight(var_42), bcPHIfaceLeft(var_43), bcEMfaceRight(var_44), bcEMfaceLeft(var_45) { }
/* ------- Function Definitions --------- */
IMP_ipic3d_colon__colon_UniverseProperties::IMP_ipic3d_colon__colon_UniverseProperties() : IMP_ipic3d_colon__colon_UniverseProperties(ipic3dUseCaseDipole, allscale::utils::Vector<long, 3 >{(int64_t)1, (int64_t)1, (int64_t)1}, allscale::utils::Vector<double, 3 >{1.0E+0, 1.0E+0, 1.0E+0}, 1.0E+0, 1.0E+0, 0.0E+0, allscale::utils::Vector<double, 3 >{0.0E+0, 0.0E+0, 0.0E+0}, allscale::utils::Vector<double, 3 >{0.0E+0, 0.0E+0, 0.0E+0}, allscale::utils::Vector<double, 3 >{(double)0, (double)0, (double)0}, 100, 100) { }
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
void IMP_ipic3d_colon__colon_UniverseProperties::store(allscale::utils::ArchiveWriter& var_1) const {
    var_1.write<ipic3dUseCase >((*this).useCase);
    var_1.write<allscale::utils::Vector<long, 3 > >((*this).size);
    var_1.write<allscale::utils::Vector<double, 3 > >((*this).cellWidth);
    var_1.write<double >((*this).dt);
    var_1.write<double >((*this).speedOfLight);
    var_1.write<double >((*this).planetRadius);
    var_1.write<allscale::utils::Vector<double, 3 > >((*this).objectCenter);
    var_1.write<allscale::utils::Vector<double, 3 > >((*this).origin);
    var_1.write<allscale::utils::Vector<double, 3 > >((*this).externalMagneticField);
    var_1.write<int32_t >((*this).FieldOutputCycle);
    var_1.write<int32_t >((*this).ParticleOutputCycle);
    var_1.write<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > >((*this).outputFileBaseName);
}
/* ------- Function Definitions --------- */
std::basic_ostream<char, std::char_traits<char > >& allscale_fun_41(std::basic_ostream<char, std::char_traits<char > >& var_0, allscale::utils::Vector<double, 3 > const& var_1) {
    return var_0 << "[" << var_1.x << "," << var_1.y << "," << var_1.z << "]";
}
struct allscale_type_37;
typedef struct allscale_type_37 allscale_type_37;

struct allscale_type_37 {
    char data[1];;
};

template<> struct is_allscale_fixed_sized_array<allscale_type_37> : public std::true_type {};
template<> struct to_std_array_type<allscale_type_37> { using type = std::array<char,1u>; };

struct allscale_type_38;
typedef struct allscale_type_38 allscale_type_38;

struct allscale_type_38 {
    char data[51];;
};

template<> struct is_allscale_fixed_sized_array<allscale_type_38> : public std::true_type {};
template<> struct to_std_array_type<allscale_type_38> { using type = std::array<char,51u>; };

struct allscale_type_49;
typedef struct allscale_type_49 allscale_type_49;

struct allscale_type_49 {
    char data[62];;
};

template<> struct is_allscale_fixed_sized_array<allscale_type_49> : public std::true_type {};
template<> struct to_std_array_type<allscale_type_49> { using type = std::array<char,62u>; };

struct allscale_type_47;
typedef struct allscale_type_47 allscale_type_47;

struct allscale_type_47 {
    char data[52];;
};

template<> struct is_allscale_fixed_sized_array<allscale_type_47> : public std::true_type {};
template<> struct to_std_array_type<allscale_type_47> { using type = std::array<char,52u>; };

struct allscale_type_50;
typedef struct allscale_type_50 allscale_type_50;

struct allscale_type_50 {
    char data[65];;
};

template<> struct is_allscale_fixed_sized_array<allscale_type_50> : public std::true_type {};
template<> struct to_std_array_type<allscale_type_50> { using type = std::array<char,65u>; };

struct allscale_type_45;
typedef struct allscale_type_45 allscale_type_45;

struct allscale_type_45 {
    char data[49];;
};

template<> struct is_allscale_fixed_sized_array<allscale_type_45> : public std::true_type {};
template<> struct to_std_array_type<allscale_type_45> { using type = std::array<char,49u>; };

/* ------- Function Definitions --------- */
std::basic_ostream<char, std::char_traits<char > >& IMP_allscale_colon__colon_utils_colon__colon__operator_lshift_(std::basic_ostream<char, std::char_traits<char > >& var_0, allscale::utils::Vector<long, 3 > const& var_1) {
    return var_0 << "[" << var_1.x << "," << var_1.y << "," << var_1.z << "]";
}
struct allscale_type_46;
typedef struct allscale_type_46 allscale_type_46;

struct allscale_type_46 {
    char data[47];;
};

template<> struct is_allscale_fixed_sized_array<allscale_type_46> : public std::true_type {};
template<> struct to_std_array_type<allscale_type_46> { using type = std::array<char,47u>; };

struct allscale_type_39;
typedef struct allscale_type_39 allscale_type_39;

struct allscale_type_39 {
    char data[67];;
};

template<> struct is_allscale_fixed_sized_array<allscale_type_39> : public std::true_type {};
template<> struct to_std_array_type<allscale_type_39> { using type = std::array<char,67u>; };

/* ------- Function Definitions --------- */
IMP_ipic3d_colon__colon_UniverseProperties::IMP_ipic3d_colon__colon_UniverseProperties(ipic3dUseCase const& var_1, allscale::utils::Vector<long, 3 > const& var_2, allscale::utils::Vector<double, 3 > const& var_3, double var_4, double var_5, double var_6, allscale::utils::Vector<double, 3 > const& var_7, allscale::utils::Vector<double, 3 > const& var_8, allscale::utils::Vector<double, 3 > const& var_9, int32_t var_10, int32_t var_11) : useCase(var_1), size(var_2), cellWidth(var_3), dt(var_4), speedOfLight(var_5), planetRadius(var_6), objectCenter(var_7), origin(var_8), externalMagneticField(var_9), FieldOutputCycle(var_10), ParticleOutputCycle(var_11), outputFileBaseName() {
    if ((bool)false) {
        IMP_allscale_colon__colon_utils_colon__colon__operator_lshift_(std::cerr << "" << "Expected positive non-zero universe size, but got ", var_2);
    };
    if ((bool)false) {
        std::cerr << "" << "Expected sizes of universe to be equal (=cubic universe), but got " << var_2.x << ", " << var_2.y << ", " << var_2.z;
    };
    if ((bool)false) {
        allscale_fun_41(std::cerr << "" << "Expected positive non-zero cell widths, but got ", var_3);
    };
    if ((bool)false) {
        std::cerr << "" << "Expected positive non-zero time step, but got " << var_4;
    };
    if ((bool)false) {
        std::cerr << "" << "Expected positive non-zero speed of light, but got " << var_5;
    };
    if ((bool)false) {
        std::cerr << "" << "Expected positive or zero object radius, but got " << var_6;
    };
    if ((bool)false) {
        std::cerr << "" << "Expected positive or zero object field output cycle, but got " << var_10;
    };
    if ((bool)false) {
        std::cerr << "" << "Expected positive or zero object particle output cycle, but got " << var_11;
    };
}
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
IMP_ipic3d_colon__colon_UniverseProperties::IMP_ipic3d_colon__colon_UniverseProperties(IMP_ipic3d_colon__colon_Parameters const& var_1) : useCase(var_1.useCase), size(allscale::utils::Vector<long, 3 >{(int64_t)var_1.ncells.x, (int64_t)var_1.ncells.y, (int64_t)var_1.ncells.z}), cellWidth(allscale::utils::Vector<double, 3 >{var_1.dspace.x, var_1.dspace.y, var_1.dspace.z}), dt(var_1.dt), speedOfLight(var_1.c), planetRadius(var_1.planetRadius), objectCenter(allscale::utils::Vector<double, 3 >{var_1.objectCenter.x, var_1.objectCenter.y, var_1.objectCenter.z}), origin(), externalMagneticField(), FieldOutputCycle(var_1.FieldOutputCycle), ParticleOutputCycle(var_1.ParticlesOutputCycle), outputFileBaseName() {
    (*this).origin.x = var_1.objectCenter.x - (double)var_1.ncells.x * var_1.dspace.x / 2.0E+0;
    (*this).origin.y = var_1.objectCenter.y - (double)var_1.ncells.y * var_1.dspace.y / 2.0E+0;
    (*this).origin.z = var_1.objectCenter.z - (double)var_1.ncells.z * var_1.dspace.z / 2.0E+0;
    (*this).externalMagneticField = allscale::utils::Vector<double, 3 >{var_1.B1.x, var_1.B1.y, var_1.B1.z};
}
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
IMP_ipic3d_colon__colon_UniverseProperties::IMP_ipic3d_colon__colon_UniverseProperties(ipic3dUseCase&& var_1, allscale::utils::Vector<long, 3 >&& var_2, allscale::utils::Vector<double, 3 >&& var_3, double&& var_4, double&& var_5, double&& var_6, allscale::utils::Vector<double, 3 >&& var_7, allscale::utils::Vector<double, 3 >&& var_8, allscale::utils::Vector<double, 3 >&& var_9, int32_t&& var_10, int32_t&& var_11, std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > >&& var_12, DummyCtorParamType var_13) : useCase(var_1), size(var_2), cellWidth(var_3), dt(var_4), speedOfLight(var_5), planetRadius(var_6), objectCenter(var_7), origin(var_8), externalMagneticField(var_9), FieldOutputCycle(var_10), ParticleOutputCycle(var_11), outputFileBaseName(var_12) { }
/* ------- Function Definitions --------- */
IMP_ipic3d_colon__colon_UniverseProperties IMP_ipic3d_colon__colon_UniverseProperties::load(allscale::utils::ArchiveReader& var_0) {
    ipic3dUseCase var_1 = var_0.read<ipic3dUseCase >();
    allscale::utils::Vector<long, 3 > var_2 = var_0.read<allscale::utils::Vector<long, 3 > >();
    allscale::utils::Vector<double, 3 > var_3 = var_0.read<allscale::utils::Vector<double, 3 > >();
    double var_4 = var_0.read<double >();
    double var_5 = var_0.read<double >();
    double var_6 = var_0.read<double >();
    allscale::utils::Vector<double, 3 > var_7 = var_0.read<allscale::utils::Vector<double, 3 > >();
    allscale::utils::Vector<double, 3 > var_8 = var_0.read<allscale::utils::Vector<double, 3 > >();
    allscale::utils::Vector<double, 3 > var_9 = var_0.read<allscale::utils::Vector<double, 3 > >();
    int32_t var_10 = var_0.read<int32_t >();
    int32_t var_11 = var_0.read<int32_t >();
    std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > var_12 = var_0.read<std::__cxx11::basic_string<char, std::char_traits<char >, std::allocator<char > > >();
    DummyCtorParamType var_13;
    return {std::move(var_1), std::move(var_2), std::move(var_3), std::move(var_4), std::move(var_5), std::move(var_6), std::move(var_7), std::move(var_8), std::move(var_9), std::move(var_10), std::move(var_11), std::move(var_12), var_13};
}
/* ------- Function Definitions --------- */
IMP_ParticleCount& IMP_ParticleCount::operator+=(IMP_ParticleCount const& var_1) {
    if ((bool)false) {
        std::cerr << "";
    };
    {
        for (uint64_t var_2 = (uint64_t)0, _end = (*this).counts.size(); var_2 < _end; ++var_2) {
            (*this).counts.operator[](var_2) += var_1.counts.operator[](var_2);
        };
    };
    return *this;
}
/* ------- Function Definitions --------- */
IMP_ParticleCount::IMP_ParticleCount() : size(), counts() { }
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
IMP_ParticleCount::IMP_ParticleCount(int32_t&& var_1, allscale::utils::Vector<long, 3 >&& var_2, std::vector<uint32_t, std::allocator<uint32_t > >&& var_3, DummyCtorParamType var_4) : num_frames(var_1), size(var_2), counts(var_3) { }
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
void IMP_ParticleCount::increment(int32_t var_1, allscale::utils::Vector<long, 3 > const& var_2, int32_t var_3) {
    (*this).IMP_increment(var_1, (int32_t)var_2.x, (int32_t)var_2.y, (int32_t)var_2.z, var_3);
}
/* ------- Function Definitions --------- */
void IMP_ParticleCount::IMP_increment(int32_t var_1, int32_t var_2, int32_t var_3, int32_t var_4, int32_t var_5) {
    (*this).counts.operator[]((*this).flatten(var_1, var_2, var_3, var_4)) += (uint32_t)var_5;
}
/* ------- Function Definitions --------- */
IMP_ParticleCount IMP_ParticleCount::load(allscale::utils::ArchiveReader& var_0) {
    int32_t var_1 = var_0.read<int32_t >();
    allscale::utils::Vector<long, 3 > var_2 = var_0.read<allscale::utils::Vector<long, 3 > >();
    std::vector<uint32_t, std::allocator<uint32_t > > var_3 = var_0.read<std::vector<uint32_t, std::allocator<uint32_t > > >();
    DummyCtorParamType var_4;
    return {std::move(var_1), std::move(var_2), std::move(var_3), var_4};
}
/* ------- Function Definitions --------- */
void IMP_ParticleCount::store(allscale::utils::ArchiveWriter& var_1) const {
    var_1.write<int32_t >((*this).num_frames);
    var_1.write<allscale::utils::Vector<long, 3 > >((*this).size);
    var_1.write<std::vector<uint32_t, std::allocator<uint32_t > > >((*this).counts);
}
/* ------- Function Definitions --------- */
uint32_t IMP_ParticleCount::get(int32_t var_1, int32_t var_2, int32_t var_3, int32_t var_4) const {
    return (*this).counts.operator[]((*this).flatten(var_1, var_2, var_3, var_4));
}
/* ------- Function Definitions --------- */
uint64_t IMP_ParticleCount::flatten(int32_t var_1, int32_t var_2, int32_t var_3, int32_t var_4) const {
    return (uint64_t)((((int64_t)var_1 * (*this).size.x + (int64_t)var_2) * (*this).size.y + (int64_t)var_3) * (*this).size.z + (int64_t)var_4);
}
/* ------- Function Definitions --------- */
IMP_ParticleCount::IMP_ParticleCount(int32_t var_1, allscale::utils::Vector<long, 3 > const& var_2) : size(var_2), counts((uint64_t)((int64_t)var_1 * var_2.x * var_2.y * var_2.z), (uint32_t)0, std::allocator<uint32_t >{}) { }
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13 IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13::load(allscale::utils::ArchiveReader& var_0) {
    int32_t var_1 = var_0.read<int32_t >();
    IMP_ipic3d_colon__colon_UniverseProperties var_2 = var_0.read<IMP_ipic3d_colon__colon_UniverseProperties >();
    double var_3 = var_0.read<double >();
    int32_t var_4 = var_0.read<int32_t >();
    int32_t var_5 = var_0.read<int32_t >();
    double var_6 = var_0.read<double >();
    double var_7 = var_0.read<double >();
    int32_t var_8 = var_0.read<int32_t >();
    int32_t var_9 = var_0.read<int32_t >();
    return {std::move(var_1), std::move(var_2), std::move(var_3), std::move(var_4), std::move(var_5), std::move(var_6), std::move(var_7), std::move(var_8), std::move(var_9)};
}
/* ------- Function Definitions --------- */
void IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13::store(allscale::utils::ArchiveWriter& var_1) const {
    var_1.write<int32_t >((*this).capture_num_frames);
    var_1.write<IMP_ipic3d_colon__colon_UniverseProperties >((*this).capture_config);
    var_1.write<double >((*this).capture_v_mod);
    var_1.write<int32_t >((*this).capture_B);
    var_1.write<int32_t >((*this).capture_N);
    var_1.write<double >((*this).capture_e);
    var_1.write<double >((*this).capture_m);
    var_1.write<int32_t >((*this).capture_T);
    var_1.write<int32_t >((*this).capture_S);
}
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
allscale::utils::Vector<double, 3 >& IMP_allscale_colon__colon_utils_colon__colon__operator_mult_assign_(allscale::utils::Vector<double, 3 >& var_0, double const& var_1) {
    {
        for (uint64_t var_2 = (uint64_t)0; var_2 < 3ul; ++var_2) {
            var_0.operator[](var_2) *= var_1;
        };
    };
    return var_0;
}
/* ------- Function Definitions --------- */
allscale::utils::Vector<double, 3 > allscale_fun_310(allscale::utils::Vector<double, 3 > const& var_0, double const& var_1) {
    allscale::utils::Vector<double, 3 > var_2 = var_0;
    return (allscale::utils::Vector<double, 3 > const&)IMP_allscale_colon__colon_utils_colon__colon__operator_mult_assign_(var_2, var_1);
}
/* ------- Function Definitions --------- */
allscale::utils::Vector<double, 3 > IMP_allscale_colon__colon_utils_colon__colon__operator_mult_(double const& var_0, allscale::utils::Vector<double, 3 > const& var_1) {
    return (allscale::utils::Vector<double, 3 >&&)allscale_fun_310(var_1, var_0);
}
struct IMP_ipic3d_colon__colon_distribution_colon__colon_uniform_pos_normal_speed_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron;
typedef struct IMP_ipic3d_colon__colon_distribution_colon__colon_uniform_pos_normal_speed_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron IMP_ipic3d_colon__colon_distribution_colon__colon_uniform_pos_normal_speed_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron;

struct IMP_ipic3d_colon__colon_distribution_colon__colon_generic_particle_generator_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron;
typedef struct IMP_ipic3d_colon__colon_distribution_colon__colon_generic_particle_generator_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron IMP_ipic3d_colon__colon_distribution_colon__colon_generic_particle_generator_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron;

struct IMP_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron;
typedef struct IMP_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron IMP_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron;

struct IMP_ipic3d_colon__colon_Particle;
typedef struct IMP_ipic3d_colon__colon_Particle IMP_ipic3d_colon__colon_Particle;

struct IMP_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron {
    ;
    ;
    IMP_ipic3d_colon__colon_Particle operator()() const;
    void store(allscale::utils::ArchiveWriter& p2) const;
    static IMP_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron load(allscale::utils::ArchiveReader& var_0);
};

struct IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal;
typedef struct IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal;

struct IMP_ipic3d_colon__colon_ziggurat_normal_distribution;
typedef struct IMP_ipic3d_colon__colon_ziggurat_normal_distribution IMP_ipic3d_colon__colon_ziggurat_normal_distribution;

struct allscale_type_393;
typedef struct allscale_type_393 allscale_type_393;

struct allscale_type_393 {
    float data[128];;
};

template<> struct is_allscale_fixed_sized_array<allscale_type_393> : public std::true_type {};
template<> struct to_std_array_type<allscale_type_393> { using type = std::array<float,128u>; };

struct allscale_type_392;
typedef struct allscale_type_392 allscale_type_392;

struct allscale_type_392 {
    uint64_t data[128];;
};

template<> struct is_allscale_fixed_sized_array<allscale_type_392> : public std::true_type {};
template<> struct to_std_array_type<allscale_type_392> { using type = std::array<uint64_t,128u>; };

struct IMP_ipic3d_colon__colon_ziggurat_normal_distribution {
    uint64_t jz;
    uint64_t jsr;
    int64_t hz;
    uint64_t iz;
    allscale_type_392 kn;
    allscale_type_393 wn;
    allscale_type_393 fn;;
    IMP_ipic3d_colon__colon_ziggurat_normal_distribution();
    IMP_ipic3d_colon__colon_ziggurat_normal_distribution(uint64_t p2);
    IMP_ipic3d_colon__colon_ziggurat_normal_distribution(IMP_ipic3d_colon__colon_ziggurat_normal_distribution const& p2) = default;
    IMP_ipic3d_colon__colon_ziggurat_normal_distribution(IMP_ipic3d_colon__colon_ziggurat_normal_distribution&& p2) = default;
    IMP_ipic3d_colon__colon_ziggurat_normal_distribution(uint64_t&& p2, uint64_t&& p3, int64_t&& p4, uint64_t&& p5, allscale_type_392&& p6, allscale_type_393&& p7, allscale_type_393&& p8, DummyCtorParamType p9);
    ~IMP_ipic3d_colon__colon_ziggurat_normal_distribution() = default;
    void IMP_zigset(uint64_t p2);
    IMP_ipic3d_colon__colon_ziggurat_normal_distribution& operator=(IMP_ipic3d_colon__colon_ziggurat_normal_distribution const& p2) = default;
    IMP_ipic3d_colon__colon_ziggurat_normal_distribution& operator=(IMP_ipic3d_colon__colon_ziggurat_normal_distribution&& p2) = default;
    float operator()();
    float IMP_nfix();
    uint64_t IMP_shr3();
    float IMP_uni();
    float rnor();
    void store(allscale::utils::ArchiveWriter& p2) const;
    static IMP_ipic3d_colon__colon_ziggurat_normal_distribution load(allscale::utils::ArchiveReader& var_0);
};

struct IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal {
    allscale::utils::Vector<double, 3 > mean;
    allscale::utils::Vector<double, 3 > stddev;
    IMP_ipic3d_colon__colon_ziggurat_normal_distribution rand;;
    IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal(IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal const& p2) = default;
    IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal(IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal&& p2) = default;
    IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal(allscale::utils::Vector<double, 3 > const& p2, allscale::utils::Vector<double, 3 > const& p3, uint32_t p4);
    IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal(allscale::utils::Vector<double, 3 >&& p2, allscale::utils::Vector<double, 3 >&& p3, IMP_ipic3d_colon__colon_ziggurat_normal_distribution&& p4, DummyCtorParamType p5);
    IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal() = default;
    ~IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal() = default;
    IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal& operator=(IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal const& p2) = default;
    IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal& operator=(IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal&& p2) = default;
    allscale::utils::Vector<double, 3 > operator()();
    void store(allscale::utils::ArchiveWriter& p2) const;
    static IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal load(allscale::utils::ArchiveReader& var_0);
};

struct IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform;
typedef struct IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform;

struct IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform {
    std::uniform_real_distribution<double > x;
    std::uniform_real_distribution<double > y;
    std::uniform_real_distribution<double > z;
    std::linear_congruential_engine<uint64_t, 48271u, 0u, 2147483647u > randGen;;
    IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform(IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform const& p2) = default;
    IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform(IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform&& p2) = default;
    IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform(allscale::utils::Vector<double, 3 > const& p2, allscale::utils::Vector<double, 3 > const& p3, uint32_t p4);
    ~IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform() = default;
    IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform& operator=(IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform const& p2) = default;
    IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform& operator=(IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform&& p2) = default;
    allscale::utils::Vector<double, 3 > operator()();
};

struct IMP_ipic3d_colon__colon_distribution_colon__colon_generic_particle_generator_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron {
    IMP_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron speciesGen;
    IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform posGen;
    IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal velGen;;
    IMP_ipic3d_colon__colon_distribution_colon__colon_generic_particle_generator_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron(IMP_ipic3d_colon__colon_distribution_colon__colon_generic_particle_generator_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron const& p2) = default;
    IMP_ipic3d_colon__colon_distribution_colon__colon_generic_particle_generator_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron(IMP_ipic3d_colon__colon_distribution_colon__colon_generic_particle_generator_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron&& p2) = default;
    IMP_ipic3d_colon__colon_distribution_colon__colon_generic_particle_generator_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron(IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform const& p2, IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal const& p3, IMP_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron const& p4);
    ~IMP_ipic3d_colon__colon_distribution_colon__colon_generic_particle_generator_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron() = default;
    IMP_ipic3d_colon__colon_distribution_colon__colon_generic_particle_generator_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron& operator=(IMP_ipic3d_colon__colon_distribution_colon__colon_generic_particle_generator_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron const& p2) = default;
    IMP_ipic3d_colon__colon_distribution_colon__colon_generic_particle_generator_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron& operator=(IMP_ipic3d_colon__colon_distribution_colon__colon_generic_particle_generator_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron&& p2) = default;
    IMP_ipic3d_colon__colon_Particle operator()();
};

struct IMP_ipic3d_colon__colon_distribution_colon__colon_uniform_pos_normal_speed_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron : public IMP_ipic3d_colon__colon_distribution_colon__colon_generic_particle_generator_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron {
    IMP_ipic3d_colon__colon_distribution_colon__colon_uniform_pos_normal_speed_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron(IMP_ipic3d_colon__colon_distribution_colon__colon_uniform_pos_normal_speed_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron const& p2) = default;
    IMP_ipic3d_colon__colon_distribution_colon__colon_uniform_pos_normal_speed_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron(IMP_ipic3d_colon__colon_distribution_colon__colon_uniform_pos_normal_speed_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron&& p2) = default;
    IMP_ipic3d_colon__colon_distribution_colon__colon_uniform_pos_normal_speed_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron(allscale::utils::Vector<double, 3 > const& p2, allscale::utils::Vector<double, 3 > const& p3, allscale::utils::Vector<double, 3 > const& p4, allscale::utils::Vector<double, 3 > const& p5, uint32_t p6);
    IMP_ipic3d_colon__colon_distribution_colon__colon_uniform_pos_normal_speed_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron(IMP_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron const& p2, allscale::utils::Vector<double, 3 > const& p3, allscale::utils::Vector<double, 3 > const& p4, allscale::utils::Vector<double, 3 > const& p5, allscale::utils::Vector<double, 3 > const& p6, uint32_t p7);
    ~IMP_ipic3d_colon__colon_distribution_colon__colon_uniform_pos_normal_speed_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron() = default;
    IMP_ipic3d_colon__colon_distribution_colon__colon_uniform_pos_normal_speed_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron& operator=(IMP_ipic3d_colon__colon_distribution_colon__colon_uniform_pos_normal_speed_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron const& p2) = default;
    IMP_ipic3d_colon__colon_distribution_colon__colon_uniform_pos_normal_speed_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron& operator=(IMP_ipic3d_colon__colon_distribution_colon__colon_uniform_pos_normal_speed_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron&& p2) = default;
};

struct IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_utils_slash_include_slash_allscale_slash_utils_slash_vector_dot_h_249_26_double_const_space_double_space__ampersand__const_space_double_space__ampersand_;
typedef struct IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_utils_slash_include_slash_allscale_slash_utils_slash_vector_dot_h_249_26_double_const_space_double_space__ampersand__const_space_double_space__ampersand_ IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_utils_slash_include_slash_allscale_slash_utils_slash_vector_dot_h_249_26_double_const_space_double_space__ampersand__const_space_double_space__ampersand_;

typedef double allscale_type_498(double const&,double const&);

typedef allscale_type_498* allscale_type_499;

struct IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_utils_slash_include_slash_allscale_slash_utils_slash_vector_dot_h_249_26_double_const_space_double_space__ampersand__const_space_double_space__ampersand_ {
    operator allscale_type_499() const;
    ;
    ;
    double operator()(double const& p2, double const& p3) const;
    void store(allscale::utils::ArchiveWriter& p2) const;
    static IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_utils_slash_include_slash_allscale_slash_utils_slash_vector_dot_h_249_26_double_const_space_double_space__ampersand__const_space_double_space__ampersand_ load(allscale::utils::ArchiveReader& var_0);
};

/* ------- Function Definitions --------- */
allscale::utils::Vector<double, 3 > IMP_allscale_colon__colon_utils_colon__colon_elementwise_3__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_utils_slash_include_slash_allscale_slash_utils_slash_vector_dot_h_249_26_double_double_double_returns_Vector_lt_double_comma__space_3UL_gt_(allscale::utils::Vector<double, 3 > const& var_0, allscale::utils::Vector<double, 3 > const& var_1, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_utils_slash_include_slash_allscale_slash_utils_slash_vector_dot_h_249_26_double_const_space_double_space__ampersand__const_space_double_space__ampersand_ const& var_2) {
    allscale::utils::Vector<double, 3 > var_3;
    {
        for (uint32_t var_4 = (uint32_t)0; var_4 < (uint32_t)3ul; ++var_4) {
            var_3.operator[]((uint64_t)var_4) = var_2.operator()(var_0.operator[]((uint64_t)var_4), var_1.operator[]((uint64_t)var_4));
        };
    };
    return (allscale::utils::Vector<double, 3 >&&)var_3;
}
/* ------- Function Definitions --------- */
allscale::utils::Vector<double, 3 > IMP_allscale_colon__colon_utils_colon__colon_elementwiseDivision_3_double_double_double_returns_Vector_lt_double_comma__space_3UL_gt_(allscale::utils::Vector<double, 3 > const& var_0, allscale::utils::Vector<double, 3 > const& var_1) {
    return (allscale::utils::Vector<double, 3 >&&)IMP_allscale_colon__colon_utils_colon__colon_elementwise_3__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_utils_slash_include_slash_allscale_slash_utils_slash_vector_dot_h_249_26_double_double_double_returns_Vector_lt_double_comma__space_3UL_gt_(var_0, var_1, INS_INIT(IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_utils_slash_include_slash_allscale_slash_utils_slash_vector_dot_h_249_26_double_const_space_double_space__ampersand__const_space_double_space__ampersand_){});
}
/* ------- Function Definitions --------- */
allscale::utils::Vector<double, 3 >& IMP_allscale_colon__colon_utils_colon__colon__operator_minus_assign_(allscale::utils::Vector<double, 3 >& var_0, allscale::utils::Vector<double, 3 > const& var_1) {
    {
        for (uint64_t var_2 = (uint64_t)0; var_2 < 3ul; ++var_2) {
            var_0.operator[](var_2) -= var_1.operator[](var_2);
        };
    };
    return var_0;
}
/* ------- Function Definitions --------- */
allscale::utils::Vector<double, 3 > IMP_allscale_colon__colon_utils_colon__colon__operator_minus_(allscale::utils::Vector<double, 3 > const& var_0, allscale::utils::Vector<double, 3 > const& var_1) {
    allscale::utils::Vector<double, 3 > var_2 = var_0;
    return (allscale::utils::Vector<double, 3 > const&)IMP_allscale_colon__colon_utils_colon__colon__operator_minus_assign_(var_2, var_1);
}
struct IMP_ipic3d_colon__colon_Particle {
    allscale::utils::Vector<double, 3 > position;
    allscale::utils::Vector<double, 3 > velocity;
    double q;
    double qom;;
    IMP_ipic3d_colon__colon_Particle();
    IMP_ipic3d_colon__colon_Particle(IMP_ipic3d_colon__colon_Particle const& p2) = default;
    IMP_ipic3d_colon__colon_Particle(IMP_ipic3d_colon__colon_Particle&& p2) = default;
    IMP_ipic3d_colon__colon_Particle(allscale::utils::Vector<double, 3 >&& p2, allscale::utils::Vector<double, 3 >&& p3, double&& p4, double&& p5, DummyCtorParamType p6);
    ~IMP_ipic3d_colon__colon_Particle() = default;
    IMP_ipic3d_colon__colon_Particle& operator=(IMP_ipic3d_colon__colon_Particle const& p2) = default;
    IMP_ipic3d_colon__colon_Particle& operator=(IMP_ipic3d_colon__colon_Particle&& p2) = default;
    void updatePosition(double p2);
    void updateVelocity(allscale::utils::Vector<double, 3 > const& p2, allscale::utils::Vector<double, 3 > const& p3, double p4);
    void store(allscale::utils::ArchiveWriter& p2) const;
    static IMP_ipic3d_colon__colon_Particle load(allscale::utils::ArchiveReader& var_0);
};

/* ------- Function Definitions --------- */
allscale::utils::Vector<long, 3 > IMP_ipic3d_colon__colon_getCellCoordinates(IMP_ipic3d_colon__colon_UniverseProperties const& var_0, IMP_ipic3d_colon__colon_Particle const& var_1) {
    allscale::utils::Vector<double, 3 > var_2 = (allscale::utils::Vector<double, 3 >&&)IMP_allscale_colon__colon_utils_colon__colon_elementwiseDivision_3_double_double_double_returns_Vector_lt_double_comma__space_3UL_gt_(IMP_allscale_colon__colon_utils_colon__colon__operator_minus_(var_1.position, var_0.origin), var_0.cellWidth);
    return {(int64_t)var_2.x, (int64_t)var_2.y, (int64_t)var_2.z};
}
/* ------- Function Definitions --------- */
double IMP_allscale_colon__colon_utils_colon__colon_sumOfSquares_double_3_returns_double(allscale::utils::Vector<double, 3 > const& var_0) {
    double var_1 = 0.0;
    {
        for (uint32_t var_2 = (uint32_t)0; var_2 < (uint32_t)3ul; ++var_2) {
            var_1 += var_0.operator[]((uint64_t)var_2) * var_0.operator[]((uint64_t)var_2);
        };
    };
    return var_1;
}
/* ------- Function Definitions --------- */
allscale::utils::Vector<double, 3 >& IMP_allscale_colon__colon_utils_colon__colon__operator_plus_assign_(allscale::utils::Vector<double, 3 >& var_0, allscale::utils::Vector<double, 3 > const& var_1) {
    {
        for (uint64_t var_2 = (uint64_t)0; var_2 < 3ul; ++var_2) {
            var_0.operator[](var_2) += var_1.operator[](var_2);
        };
    };
    return var_0;
}
/* ------- Function Definitions --------- */
allscale::utils::Vector<double, 3 > IMP_allscale_colon__colon_utils_colon__colon__operator_plus_(allscale::utils::Vector<double, 3 > const& var_0, allscale::utils::Vector<double, 3 > const& var_1) {
    allscale::utils::Vector<double, 3 > var_2 = var_0;
    return (allscale::utils::Vector<double, 3 > const&)IMP_allscale_colon__colon_utils_colon__colon__operator_plus_assign_(var_2, var_1);
}
struct IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_utils_slash_include_slash_allscale_slash_utils_slash_vector_dot_h_244_26_double_const_space_double_space__ampersand__const_space_long_space__ampersand_;
typedef struct IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_utils_slash_include_slash_allscale_slash_utils_slash_vector_dot_h_244_26_double_const_space_double_space__ampersand__const_space_long_space__ampersand_ IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_utils_slash_include_slash_allscale_slash_utils_slash_vector_dot_h_244_26_double_const_space_double_space__ampersand__const_space_long_space__ampersand_;

typedef double allscale_type_290(double const&,int64_t const&);

typedef allscale_type_290* allscale_type_291;

struct IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_utils_slash_include_slash_allscale_slash_utils_slash_vector_dot_h_244_26_double_const_space_double_space__ampersand__const_space_long_space__ampersand_ {
    operator allscale_type_291() const;
    ;
    ;
    double operator()(double const& p2, int64_t const& p3) const;
    void store(allscale::utils::ArchiveWriter& p2) const;
    static IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_utils_slash_include_slash_allscale_slash_utils_slash_vector_dot_h_244_26_double_const_space_double_space__ampersand__const_space_long_space__ampersand_ load(allscale::utils::ArchiveReader& var_0);
};

/* ------- Function Definitions --------- */
allscale::utils::Vector<double, 3 > IMP_allscale_colon__colon_utils_colon__colon_elementwise_3__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_utils_slash_include_slash_allscale_slash_utils_slash_vector_dot_h_244_26_double_long_double_returns_Vector_lt_double_comma__space_3UL_gt_(allscale::utils::Vector<double, 3 > const& var_0, allscale::utils::Vector<long, 3 > const& var_1, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_utils_slash_include_slash_allscale_slash_utils_slash_vector_dot_h_244_26_double_const_space_double_space__ampersand__const_space_long_space__ampersand_ const& var_2) {
    allscale::utils::Vector<double, 3 > var_3;
    {
        for (uint32_t var_4 = (uint32_t)0; var_4 < (uint32_t)3ul; ++var_4) {
            var_3.operator[]((uint64_t)var_4) = var_2.operator()(var_0.operator[]((uint64_t)var_4), var_1.operator[]((uint64_t)var_4));
        };
    };
    return (allscale::utils::Vector<double, 3 >&&)var_3;
}
/* ------- Function Definitions --------- */
allscale::utils::Vector<double, 3 > IMP_allscale_colon__colon_utils_colon__colon_elementwiseProduct_3_double_long_double_returns_Vector_lt_double_comma__space_3UL_gt_(allscale::utils::Vector<double, 3 > const& var_0, allscale::utils::Vector<long, 3 > const& var_1) {
    return (allscale::utils::Vector<double, 3 >&&)IMP_allscale_colon__colon_utils_colon__colon_elementwise_3__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_utils_slash_include_slash_allscale_slash_utils_slash_vector_dot_h_244_26_double_long_double_returns_Vector_lt_double_comma__space_3UL_gt_(var_0, var_1, INS_INIT(IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_utils_slash_include_slash_allscale_slash_utils_slash_vector_dot_h_244_26_double_const_space_double_space__ampersand__const_space_long_space__ampersand_){});
}
/* ------- Function Definitions --------- */
void IMP_traceParticle(IMP_ipic3d_colon__colon_Particle var_0, int32_t var_1, IMP_ipic3d_colon__colon_UniverseProperties const& var_2, int32_t var_3, IMP_ParticleCount& var_4) {
    double var_5 = var_2.dt;
    allscale::utils::Vector<double, 3 > var_6 = (allscale::utils::Vector<double, 3 >&&)IMP_allscale_colon__colon_utils_colon__colon_elementwiseProduct_3_double_long_double_returns_Vector_lt_double_comma__space_3UL_gt_(var_2.cellWidth, var_2.size);
    allscale::utils::Vector<double, 3 > var_7 = (allscale::utils::Vector<double, 3 > const&)var_2.origin;
    allscale::utils::Vector<double, 3 > var_8 = (allscale::utils::Vector<double, 3 >&&)IMP_allscale_colon__colon_utils_colon__colon__operator_plus_(var_2.origin, var_6);
    IMP_allscale_colon__colon_utils_colon__colon__operator_plus_assign_(var_0.position, var_2.objectCenter);
    allscale::utils::Vector<double, 3 > var_9 = (allscale::utils::Vector<double, 3 >&&)IMP_allscale_colon__colon_utils_colon__colon__operator_minus_(var_0.position, var_2.objectCenter);
    double var_10 = IMP_allscale_colon__colon_utils_colon__colon_sumOfSquares_double_3_returns_double(var_9);
    if (var_10 < var_2.planetRadius * var_2.planetRadius) {
        return;
    };
    {
        uint64_t var_11 = (uint64_t)0;
        while (var_11 < (uint64_t)3) {
            {
                if (var_0.position.operator[](var_11) > var_8.operator[](var_11)) {
                    return;
                };
                if (var_0.position.operator[](var_11) < var_7.operator[](var_11)) {
                    return;
                };
            };
            var_11++;
        };
    };
    {
        int32_t var_12 = 0;
        while (var_12 < var_1) {
            {
                allscale::utils::Vector<long, 3 > var_13 = (allscale::utils::Vector<long, 3 >&&)IMP_ipic3d_colon__colon_getCellCoordinates(var_2, var_0);
                double var_14 = (0.0 - var_2.externalMagneticField.z) * pow(var_2.planetRadius, (double)3) / pow(IMP_allscale_colon__colon_utils_colon__colon_sumOfSquares_double_3_returns_double(var_0.position), 2.5E+0);
                allscale::utils::Vector<double, 3 > var_15;
                allscale::utils::Vector<double, 3 > var_16;
                var_15 = allscale::utils::Vector<double, 3 >{0.0E+0, 0.0E+0, 0.0E+0};
                var_16.x = 3.0E+0 * var_0.position.x * var_0.position.z * var_14;
                var_16.y = 3.0E+0 * var_0.position.y * var_0.position.z * var_14;
                var_16.z = (2.0E+0 * pow(var_0.position.z, (double)2) - pow(var_0.position.x, (double)2) - pow(var_0.position.y, (double)2)) * var_14;
                double var_17 = IMP_allscale_colon__colon_utils_colon__colon_sumOfSquares_double_3_returns_double(var_16);
                double var_18 = 3.1415926535897931E+0 * var_2.speedOfLight / (4.0E+0 * fabs(var_0.qom) * var_17);
                int32_t var_19 = (int32_t)(var_5 / var_18) + 1;
                var_19 = std::min(var_19, 100);
                var_18 = var_5 / (double)var_19;
                {
                    for (int32_t var_20 = 0; var_20 < var_19; ++var_20) {
                        {
                            var_0.updateVelocity(var_15, var_16, var_18);
                            var_0.updatePosition(var_18);
                        };
                    };
                };
                {
                    for (uint64_t var_21 = (uint64_t)0; var_21 < (uint64_t)3; ++var_21) {
                        {
                            if (var_0.position.operator[](var_21) > var_8.operator[](var_21)) {
                                var_0.position.operator[](var_21) -= var_6.operator[](var_21);
                            };
                            if (var_0.position.operator[](var_21) < var_7.operator[](var_21)) {
                                var_0.position.operator[](var_21) += var_6.operator[](var_21);
                            };
                        };
                    };
                };
                allscale::utils::Vector<double, 3 > var_22 = (allscale::utils::Vector<double, 3 >&&)IMP_allscale_colon__colon_utils_colon__colon__operator_minus_(var_0.position, var_2.objectCenter);
                double var_23 = IMP_allscale_colon__colon_utils_colon__colon_sumOfSquares_double_3_returns_double(var_22);
                if (var_23 <= var_2.planetRadius * var_2.planetRadius) {
                    return;
                };
                if (var_12 % var_3 == 0) {
                    var_4.increment(var_12 / var_3, var_13, 1);
                };
            };
            var_12++;
        };
    };
}
/* ------- Function Definitions --------- */
allscale::utils::Vector<double, 3 >& IMP_allscale_colon__colon_utils_colon__colon__operator_div_assign_(allscale::utils::Vector<double, 3 >& var_0, double const& var_1) {
    {
        for (uint64_t var_2 = (uint64_t)0; var_2 < 3ul; ++var_2) {
            var_0.operator[](var_2) /= var_1;
        };
    };
    return var_0;
}
/* ------- Function Definitions --------- */
allscale::utils::Vector<double, 3 > IMP_allscale_colon__colon_utils_colon__colon__operator_div_(allscale::utils::Vector<double, 3 > const& var_0, double const& var_1) {
    allscale::utils::Vector<double, 3 > var_2 = var_0;
    return (allscale::utils::Vector<double, 3 > const&)IMP_allscale_colon__colon_utils_colon__colon__operator_div_assign_(var_2, var_1);
}
/* ------- Function Definitions --------- */
IMP_ParticleCount IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13::operator()(int32_t var_1, int32_t var_2) const {
    IMP_ParticleCount var_3{((*this).capture_num_frames), ((*this).capture_config.size)};
    allscale::utils::Vector<double, 3 > var_4 = (allscale::utils::Vector<double, 3 >&&)IMP_allscale_colon__colon_utils_colon__colon__operator_plus_((*this).capture_config.origin, IMP_allscale_colon__colon_utils_colon__colon__operator_div_(IMP_allscale_colon__colon_utils_colon__colon_elementwiseProduct_3_double_long_double_returns_Vector_lt_double_comma__space_3UL_gt_((*this).capture_config.cellWidth, (*this).capture_config.size), 8.0E+0));
    allscale::utils::Vector<double, 3 > var_5 = (allscale::utils::Vector<double, 3 >&&)IMP_allscale_colon__colon_utils_colon__colon__operator_plus_(var_4, IMP_allscale_colon__colon_utils_colon__colon__operator_mult_(7.5E-1, IMP_allscale_colon__colon_utils_colon__colon_elementwiseProduct_3_double_long_double_returns_Vector_lt_double_comma__space_3UL_gt_((*this).capture_config.cellWidth, (*this).capture_config.size)));
    IMP_ipic3d_colon__colon_distribution_colon__colon_uniform_pos_normal_speed_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron var_6{(var_4), (var_5), (allscale::utils::Vector<double, 3 >{0.0E+0, 0.0E+0, 0.0E+0}), (allscale::utils::Vector<double, 3 >{(*this).capture_v_mod, (*this).capture_v_mod, (*this).capture_v_mod}), ((uint32_t)(var_1 * var_2))};
    {
        int32_t var_7 = var_1 * (*this).capture_B;
        while (var_7 < var_2 * (*this).capture_B && var_7 < (*this).capture_N) {
            {
                IMP_ipic3d_colon__colon_Particle var_8 = (IMP_ipic3d_colon__colon_Particle&&)(*(IMP_ipic3d_colon__colon_distribution_colon__colon_generic_particle_generator_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron*)(&var_6)).operator()();
                var_8.q = (*this).capture_e;
                var_8.qom = (*this).capture_e / (*this).capture_m;
                IMP_traceParticle((IMP_ipic3d_colon__colon_Particle const&)var_8, (*this).capture_T + 1, (*this).capture_config, (*this).capture_S, var_3);
            };
            var_7++;
        };
    };
    return (IMP_ParticleCount&&)var_3;
}
/* ------- Function Definitions --------- */
void IMP_ipic3d_colon__colon_Particle::updatePosition(double var_1) {
    IMP_allscale_colon__colon_utils_colon__colon__operator_plus_assign_((*this).position, allscale_fun_310((*this).velocity, var_1));
}
/* ------- Function Definitions --------- */
IMP_ipic3d_colon__colon_Particle IMP_ipic3d_colon__colon_Particle::load(allscale::utils::ArchiveReader& var_0) {
    allscale::utils::Vector<double, 3 > var_1 = var_0.read<allscale::utils::Vector<double, 3 > >();
    allscale::utils::Vector<double, 3 > var_2 = var_0.read<allscale::utils::Vector<double, 3 > >();
    double var_3 = var_0.read<double >();
    double var_4 = var_0.read<double >();
    DummyCtorParamType var_5;
    return {std::move(var_1), std::move(var_2), std::move(var_3), std::move(var_4), var_5};
}
/* ------- Function Definitions --------- */
void IMP_ipic3d_colon__colon_Particle::store(allscale::utils::ArchiveWriter& var_1) const {
    var_1.write<allscale::utils::Vector<double, 3 > >((*this).position);
    var_1.write<allscale::utils::Vector<double, 3 > >((*this).velocity);
    var_1.write<double >((*this).q);
    var_1.write<double >((*this).qom);
}
/* ------- Function Definitions --------- */
IMP_ipic3d_colon__colon_Particle::IMP_ipic3d_colon__colon_Particle() : position(), velocity(), q(0.0), qom(0.0) { }
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
IMP_ipic3d_colon__colon_Particle::IMP_ipic3d_colon__colon_Particle(allscale::utils::Vector<double, 3 >&& var_1, allscale::utils::Vector<double, 3 >&& var_2, double&& var_3, double&& var_4, DummyCtorParamType var_5) : position(var_1), velocity(var_2), q(var_3), qom(var_4) { }
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
allscale::utils::Vector<double, 3 > IMP_allscale_colon__colon_utils_colon__colon_crossProduct_double_returns_Vector_lt_double_comma__space_3_gt_(allscale::utils::Vector<double, 3 > const& var_0, allscale::utils::Vector<double, 3 > const& var_1) {
    return (allscale::utils::Vector<double, 3 >&&)allscale::utils::Vector<double, 3 >{var_0.operator[]((uint64_t)1) * var_1.operator[]((uint64_t)2) - var_0.operator[]((uint64_t)2) * var_1.operator[]((uint64_t)1), var_0.operator[]((uint64_t)2) * var_1.operator[]((uint64_t)0) - var_0.operator[]((uint64_t)0) * var_1.operator[]((uint64_t)2), var_0.operator[]((uint64_t)0) * var_1.operator[]((uint64_t)1) - var_0.operator[]((uint64_t)1) * var_1.operator[]((uint64_t)0)};
}
/* ------- Function Definitions --------- */
void IMP_ipic3d_colon__colon_Particle::updateVelocity(allscale::utils::Vector<double, 3 > const& var_1, allscale::utils::Vector<double, 3 > const& var_2, double var_3) {
    double var_4 = (*this).qom * 5.0E-1 * var_3;
    allscale::utils::Vector<double, 3 > var_5 = (allscale::utils::Vector<double, 3 >&&)IMP_allscale_colon__colon_utils_colon__colon__operator_mult_(var_4, var_2);
    double var_6 = IMP_allscale_colon__colon_utils_colon__colon_sumOfSquares_double_3_returns_double(var_5);
    allscale::utils::Vector<double, 3 > var_7 = (allscale::utils::Vector<double, 3 >&&)IMP_allscale_colon__colon_utils_colon__colon__operator_div_(IMP_allscale_colon__colon_utils_colon__colon__operator_mult_(2.0E+0, var_5), 1.0E+0 + var_6);
    allscale::utils::Vector<double, 3 > var_8 = (allscale::utils::Vector<double, 3 >&&)IMP_allscale_colon__colon_utils_colon__colon__operator_plus_((*this).velocity, IMP_allscale_colon__colon_utils_colon__colon__operator_mult_(var_4, var_1));
    allscale::utils::Vector<double, 3 > var_9 = (allscale::utils::Vector<double, 3 >&&)IMP_allscale_colon__colon_utils_colon__colon__operator_plus_(var_8, IMP_allscale_colon__colon_utils_colon__colon_crossProduct_double_returns_Vector_lt_double_comma__space_3_gt_(var_8, var_5));
    allscale::utils::Vector<double, 3 > var_10 = (allscale::utils::Vector<double, 3 >&&)IMP_allscale_colon__colon_utils_colon__colon__operator_plus_(var_8, IMP_allscale_colon__colon_utils_colon__colon_crossProduct_double_returns_Vector_lt_double_comma__space_3_gt_(var_9, var_7));
    (*this).velocity = IMP_allscale_colon__colon_utils_colon__colon__operator_plus_(var_10, IMP_allscale_colon__colon_utils_colon__colon__operator_mult_(var_4, var_1));
}
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
IMP_ipic3d_colon__colon_Particle IMP_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron::operator()() const {
    IMP_ipic3d_colon__colon_Particle var_1;
    var_1.q = -1.0E+0;
    var_1.qom = -2.5E+1;
    return (IMP_ipic3d_colon__colon_Particle&&)var_1;
}
/* ------- Function Definitions --------- */
void IMP_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron::store(allscale::utils::ArchiveWriter& var_1) const { }
/* ------- Function Definitions --------- */
IMP_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron IMP_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron::load(allscale::utils::ArchiveReader& var_0) {
    return {};
}
/* ------- Function Definitions --------- */
IMP_ipic3d_colon__colon_ziggurat_normal_distribution::IMP_ipic3d_colon__colon_ziggurat_normal_distribution() : IMP_ipic3d_colon__colon_ziggurat_normal_distribution((uint64_t)0) { }
/* ------- Function Definitions --------- */
IMP_ipic3d_colon__colon_ziggurat_normal_distribution::IMP_ipic3d_colon__colon_ziggurat_normal_distribution(uint64_t pos) : jsr((uint64_t)123456789) {
    (*this).IMP_zigset(pos);
}
/* ------- Function Definitions --------- */
void IMP_ipic3d_colon__colon_ziggurat_normal_distribution::IMP_zigset(uint64_t pos) {
    const double var_2 = 2.147483648E+9;
    double var_3 = 3.4426198558990002E+0;
    double var_4 = var_3;
    double var_5 = 9.9125630352621691E-3;
    double var_6;
    int32_t var_7;
    (*this).jsr ^= pos;
    var_6 = var_5 / exp(-5.0E-1 * var_3 * var_3);
    (*this).kn.data[0] = (uint64_t)(var_3 / var_6 * var_2);
    (*this).kn.data[1] = (uint64_t)0;
    (*this).wn.data[0] = (float)(var_6 / var_2);
    (*this).wn.data[127] = (float)(var_3 / var_2);
    (*this).fn.data[0] = (float)1.0E+0;
    (*this).fn.data[127] = (float)exp(-5.0E-1 * var_3 * var_3);
    {
        var_7 = 126;
        while (var_7 >= 1) {
            {
                var_3 = sqrt(-2.0E+0 * log(var_5 / var_3 + exp(-5.0E-1 * var_3 * var_3)));
                (*this).kn.data[var_7 + 1] = (uint64_t)(var_3 / var_4 * var_2);
                var_4 = var_3;
                (*this).fn.data[var_7] = (float)exp(-5.0E-1 * var_3 * var_3);
                (*this).wn.data[var_7] = (float)(var_3 / var_2);
            };
            var_7--;
        };
    };
}
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
IMP_ipic3d_colon__colon_ziggurat_normal_distribution::IMP_ipic3d_colon__colon_ziggurat_normal_distribution(uint64_t&& var_1, uint64_t&& var_2, int64_t&& var_3, uint64_t&& var_4, allscale_type_392&& var_5, allscale_type_393&& var_6, allscale_type_393&& var_7, DummyCtorParamType var_8) : jz(var_1), jsr(var_2), hz(var_3), iz(var_4), kn(var_5), wn(var_6), fn(var_7) { }
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
uint64_t IMP_ipic3d_colon__colon_ziggurat_normal_distribution::IMP_shr3() {
    (*this).jz = (*this).jsr;
    (*this).jsr ^= (*this).jsr << 13;
    (*this).jsr ^= (*this).jsr >> 17;
    (*this).jsr ^= (*this).jsr << 5;
    return (*this).jz + (*this).jsr;
}
/* ------- Function Definitions --------- */
float IMP_ipic3d_colon__colon_ziggurat_normal_distribution::IMP_uni() {
    return (float)(5.0E-1 + (double)((int32_t)(*this).IMP_shr3()) * 2.328306E-10);
}
/* ------- Function Definitions --------- */
float IMP_ipic3d_colon__colon_ziggurat_normal_distribution::IMP_nfix() {
    int32_t var_1;
    uint32_t var_2;
    const float var_3 = 3.44262004E+0f;
    float var_4;
    float var_5;
    float var_6;
    var_1 = (int32_t)(*this).IMP_shr3();
    var_2 = (uint32_t)(var_1 & 127);
    if (fabs((double)var_1) < (double)(*this).kn.data[var_2]) {
        var_4 = (float)var_1 * (*this).wn.data[var_2];
    } else {
        while ((bool)true) {
            if (var_2 == (uint32_t)0) {
                {
                    while ((bool)true) {
                        var_5 = (float)(-2.9047640000000002E-1 * log((double)(*this).IMP_uni()));
                        var_6 = (float)(0.0 - log((double)(*this).IMP_uni()));
                        if (var_5 * var_5 <= var_6 + var_6) {
                            break;
                        };
                    };
                };
                if (var_1 <= 0) {
                    var_4 = 0.0f - var_3 - var_5;
                } else {
                    var_4 = var_3 + var_5;
                };
                break;
            };
            var_5 = (float)var_1 * (*this).wn.data[var_2];
            if ((double)((*this).fn.data[var_2] + (*this).IMP_uni() * ((*this).fn.data[var_2 - (uint32_t)1] - (*this).fn.data[var_2])) < exp(-5.0E-1 * (double)var_5 * (double)var_5)) {
                var_4 = var_5;
                break;
            };
            var_1 = (int32_t)(*this).IMP_shr3();
            var_2 = (uint32_t)(var_1 & 127);
            if (fabs((double)var_1) < (double)(*this).kn.data[var_2]) {
                var_4 = (float)var_1 * (*this).wn.data[var_2];
                break;
            };
        };
    };
    return var_4;
}
/* ------- Function Definitions --------- */
float IMP_ipic3d_colon__colon_ziggurat_normal_distribution::operator()() {
    return (*this).IMP_nfix();
}
/* ------- Function Definitions --------- */
void IMP_ipic3d_colon__colon_ziggurat_normal_distribution::store(allscale::utils::ArchiveWriter& var_1) const {
    var_1.write<uint64_t >((*this).jz);
    var_1.write<uint64_t >((*this).jsr);
    var_1.write<int64_t >((*this).hz);
    var_1.write<uint64_t >((*this).iz);
    var_1.write<allscale_type_392 >((*this).kn);
    var_1.write<allscale_type_393 >((*this).wn);
    var_1.write<allscale_type_393 >((*this).fn);
}
/* ------- Function Definitions --------- */
IMP_ipic3d_colon__colon_ziggurat_normal_distribution IMP_ipic3d_colon__colon_ziggurat_normal_distribution::load(allscale::utils::ArchiveReader& var_0) {
    uint64_t pos = var_0.read<uint64_t >();
    uint64_t var_2 = var_0.read<uint64_t >();
    int64_t i = var_0.read<int64_t >();
    uint64_t var_4 = var_0.read<uint64_t >();
    allscale_type_392 var_5 = var_0.read<allscale_type_392 >();
    allscale_type_393 var_6 = var_0.read<allscale_type_393 >();
    allscale_type_393 var_7 = var_0.read<allscale_type_393 >();
    DummyCtorParamType var_8;
    return {std::move(pos), std::move(var_2), std::move(i), std::move(var_4), std::move(var_5), std::move(var_6), std::move(var_7), var_8};
}
/* ------- Function Definitions --------- */
float IMP_ipic3d_colon__colon_ziggurat_normal_distribution::rnor() {
    (*this).hz = (int64_t)(*this).IMP_shr3();
    (*this).iz = (uint64_t)((*this).hz & (int64_t)127);
    return fabs((double)(*this).hz) < (double)(*this).kn.data[(*this).iz] ? (float)(*this).hz * (*this).wn.data[(*this).iz] : (*this).IMP_nfix();
}
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal::IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal(allscale::utils::Vector<double, 3 >&& var_1, allscale::utils::Vector<double, 3 >&& var_2, IMP_ipic3d_colon__colon_ziggurat_normal_distribution&& var_3, DummyCtorParamType var_4) : mean(var_1), stddev(var_2), rand(var_3) { }
/* ------- Function Definitions --------- */
allscale::utils::Vector<double, 3 > IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal::operator()() {
    return {(*this).mean.x + (*this).stddev.x * (double)(*this).rand.operator()(), (*this).mean.y + (*this).stddev.y * (double)(*this).rand.operator()(), (*this).mean.z + (*this).stddev.z * (double)(*this).rand.operator()()};
}
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
void IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal::store(allscale::utils::ArchiveWriter& var_1) const {
    var_1.write<allscale::utils::Vector<double, 3 > >((*this).mean);
    var_1.write<allscale::utils::Vector<double, 3 > >((*this).stddev);
    var_1.write<IMP_ipic3d_colon__colon_ziggurat_normal_distribution >((*this).rand);
}
/* ------- Function Definitions --------- */
IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal::load(allscale::utils::ArchiveReader& var_0) {
    allscale::utils::Vector<double, 3 > var_1 = var_0.read<allscale::utils::Vector<double, 3 > >();
    allscale::utils::Vector<double, 3 > var_2 = var_0.read<allscale::utils::Vector<double, 3 > >();
    IMP_ipic3d_colon__colon_ziggurat_normal_distribution var_3 = var_0.read<IMP_ipic3d_colon__colon_ziggurat_normal_distribution >();
    DummyCtorParamType var_4;
    return {std::move(var_1), std::move(var_2), std::move(var_3), var_4};
}
/* ------- Function Definitions --------- */
IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal::IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal(allscale::utils::Vector<double, 3 > const& var_1, allscale::utils::Vector<double, 3 > const& var_2, uint32_t var_3) : mean(var_1), stddev(var_2), rand((uint64_t)var_3) { }
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
allscale::utils::Vector<double, 3 > IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform::operator()() {
    return {(*this).x.operator()((*this).randGen), (*this).y.operator()((*this).randGen), (*this).z.operator()((*this).randGen)};
}
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform::IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform(allscale::utils::Vector<double, 3 > const& var_1, allscale::utils::Vector<double, 3 > const& var_2, uint32_t var_3) : x(var_1.x, var_2.x), y(var_1.y, var_2.y), z(var_1.z, var_2.z), randGen(var_3) { }
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
IMP_ipic3d_colon__colon_distribution_colon__colon_generic_particle_generator_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron::IMP_ipic3d_colon__colon_distribution_colon__colon_generic_particle_generator_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron(IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform const& var_1, IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal const& var_2, IMP_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron const& var_3) : speciesGen(var_3), posGen(var_1), velGen(var_2) { }
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
IMP_ipic3d_colon__colon_Particle IMP_ipic3d_colon__colon_distribution_colon__colon_generic_particle_generator_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron::operator()() {
    IMP_ipic3d_colon__colon_Particle var_1 = (IMP_ipic3d_colon__colon_Particle&&)(*this).speciesGen.operator()();
    var_1.position = (*this).posGen.operator()();
    var_1.velocity = (*this).velGen.operator()();
    return (IMP_ipic3d_colon__colon_Particle&&)var_1;
}
/* ------- Function Definitions --------- */
IMP_ipic3d_colon__colon_distribution_colon__colon_uniform_pos_normal_speed_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron::IMP_ipic3d_colon__colon_distribution_colon__colon_uniform_pos_normal_speed_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron(IMP_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron const& var_1, allscale::utils::Vector<double, 3 > const& var_2, allscale::utils::Vector<double, 3 > const& var_3, allscale::utils::Vector<double, 3 > const& var_4, allscale::utils::Vector<double, 3 > const& var_5, uint32_t var_6) : IMP_ipic3d_colon__colon_distribution_colon__colon_generic_particle_generator_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron(IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform{var_2, var_3, var_6 + (uint32_t)1}, IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal{var_4, var_5, var_6 + (uint32_t)2}, var_1) { }
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
IMP_ipic3d_colon__colon_distribution_colon__colon_uniform_pos_normal_speed_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron::IMP_ipic3d_colon__colon_distribution_colon__colon_uniform_pos_normal_speed_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron(allscale::utils::Vector<double, 3 > const& var_1, allscale::utils::Vector<double, 3 > const& var_2, allscale::utils::Vector<double, 3 > const& var_3, allscale::utils::Vector<double, 3 > const& var_4, uint32_t var_5) : IMP_ipic3d_colon__colon_distribution_colon__colon_generic_particle_generator_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal_struct_space_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron(IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_uniform{var_1, var_2, var_5 + (uint32_t)1}, IMP_ipic3d_colon__colon_distribution_colon__colon_vector_colon__colon_normal{var_3, var_4, var_5 + (uint32_t)2}, IMP_ipic3d_colon__colon_distribution_colon__colon_species_colon__colon_electron{}) { }
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_utils_slash_include_slash_allscale_slash_utils_slash_vector_dot_h_249_26_double_const_space_double_space__ampersand__const_space_double_space__ampersand_::operator allscale_type_499() const {
    assert((bool)false && (bool)"This is an Insieme generated dummy function which should never be called");
}
/* ------- Function Definitions --------- */
void IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_utils_slash_include_slash_allscale_slash_utils_slash_vector_dot_h_249_26_double_const_space_double_space__ampersand__const_space_double_space__ampersand_::store(allscale::utils::ArchiveWriter& var_1) const { }
/* ------- Function Definitions --------- */
IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_utils_slash_include_slash_allscale_slash_utils_slash_vector_dot_h_249_26_double_const_space_double_space__ampersand__const_space_double_space__ampersand_ IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_utils_slash_include_slash_allscale_slash_utils_slash_vector_dot_h_249_26_double_const_space_double_space__ampersand__const_space_double_space__ampersand_::load(allscale::utils::ArchiveReader& var_0) {
    return {};
}
/* ------- Function Definitions --------- */
double IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_utils_slash_include_slash_allscale_slash_utils_slash_vector_dot_h_249_26_double_const_space_double_space__ampersand__const_space_double_space__ampersand_::operator()(double const& var_1, double const& var_2) const {
    return var_1 / var_2;
}
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_utils_slash_include_slash_allscale_slash_utils_slash_vector_dot_h_244_26_double_const_space_double_space__ampersand__const_space_long_space__ampersand_::operator allscale_type_291() const {
    assert((bool)false && (bool)"This is an Insieme generated dummy function which should never be called");
}
/* ------- Function Definitions --------- */
void IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_utils_slash_include_slash_allscale_slash_utils_slash_vector_dot_h_244_26_double_const_space_double_space__ampersand__const_space_long_space__ampersand_::store(allscale::utils::ArchiveWriter& var_1) const { }
/* ------- Function Definitions --------- */
double IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_utils_slash_include_slash_allscale_slash_utils_slash_vector_dot_h_244_26_double_const_space_double_space__ampersand__const_space_long_space__ampersand_::operator()(double const& var_1, int64_t const& var_2) const {
    return var_1 * (double)var_2;
}
/* ------- Function Definitions --------- */
IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_utils_slash_include_slash_allscale_slash_utils_slash_vector_dot_h_244_26_double_const_space_double_space__ampersand__const_space_long_space__ampersand_ IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_utils_slash_include_slash_allscale_slash_utils_slash_vector_dot_h_244_26_double_const_space_double_space__ampersand__const_space_long_space__ampersand_::load(allscale::utils::ArchiveReader& var_0) {
    return {};
}
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16::operator allscale_type_530() const {
    assert((bool)false && (bool)"This is an Insieme generated dummy function which should never be called");
}
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
IMP_ParticleCount IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16::operator()(IMP_ParticleCount&& var_1, IMP_ParticleCount const& var_2) const {
    var_1.operator+=(var_2);
    return std::move(var_1);
}
/* ------- Function Definitions --------- */
void IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16::store(allscale::utils::ArchiveWriter& var_1) const { }
/* ------- Function Definitions --------- */
IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16 IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16::load(allscale::utils::ArchiveReader& var_0) {
    return {};
}
struct IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_volume_int_bool;
typedef struct IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_volume_int_bool IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_volume_int_bool;

struct IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_volume_int_bool {
    ;
    ;
    uint64_t operator()(int32_t p2, int32_t p3) const;
    void store(allscale::utils::ArchiveWriter& p2) const;
    static IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_volume_int_bool load(allscale::utils::ArchiveReader& var_0);
};

/* ------- Function Definitions --------- */
uint64_t IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int::IMP_size_returns_size_t() const {
    return IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_volume_int_bool{}.operator()((*this)._begin, (*this)._end);
}
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
void IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_volume_int_bool::store(allscale::utils::ArchiveWriter& var_1) const { }
/* ------- Function Definitions --------- */
IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_volume_int_bool IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_volume_int_bool::load(allscale::utils::ArchiveReader& var_0) {
    return {};
}
/* ------- Function Definitions --------- */
uint64_t IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_volume_int_bool::operator()(int32_t var_1, int32_t var_2) const {
    return (uint64_t)(var_1 < var_2 ? var_2 - var_1 : 0);
}
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int::IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int(int32_t&& var_1, int32_t&& var_2, DummyCtorParamType var_3) : _begin(var_1), _end(var_2) { }
/* ------- Function Definitions --------- */
bool IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int::IMP_empty_returns_bool() const {
    return (*this).IMP_size_returns_size_t() == (uint64_t)0;
}
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int::IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int(int32_t const& var_1, int32_t const& var_2) : _begin(var_1), _end(var_2) {
    if ((*this).IMP_empty_returns_bool()) {
        (*this)._end = (*this)._begin;
    };
}
/* ------- Function Definitions --------- */
IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int::IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int() : _begin(0), _end(0) { }
/* ------- Function Definitions --------- */
int32_t const& IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int::begin_returns_constint() const {
    return (*this)._begin;
}
/* ------- Function Definitions --------- */
bool IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_covers_int_returns_bool(int32_t const& var_0, int32_t const& var_1, int32_t const& var_2, int32_t const& var_3) {
    return var_2 >= var_3 || (var_0 <= var_2 && var_3 <= var_1);
}
/* ------- Function Definitions --------- */
bool IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int::covers_returns_bool(IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int const& var_1) const {
    return IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_covers_int_returns_bool((*this)._begin, (*this)._end, var_1._begin, var_1._end);
}
/* ------- Function Definitions --------- */
int32_t const& IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int::end_returns_constint() const {
    return (*this)._end;
}
/* ------- Function Definitions --------- */
int32_t IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_grow_int_returns_int(int32_t const& var_0, int32_t const& var_1, int32_t var_2) {
    return std::min(var_1, var_0 + var_2);
}
/* ------- Function Definitions --------- */
int32_t IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_shrink_int_returns_int(int32_t const& var_0, int32_t const& var_1, int32_t var_2) {
    return std::max(var_1, var_0 - var_2);
}
/* ------- Function Definitions --------- */
IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int::grow_returns_allscaleapiuseralgorithmdetailrangeint(IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int const& var_1, int32_t var_2) const {
    return (IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int&&)IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int{IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_shrink_int_returns_int((*this)._begin, var_1.begin_returns_constint(), var_2), IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_grow_int_returns_int((*this)._end, var_1.end_returns_constint(), var_2)};
}
/* ------- Function Definitions --------- */
IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int::shrink_returns_allscaleapiuseralgorithmdetailrangeint(int32_t var_1) const {
    return (IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int&&)(*this).grow_returns_allscaleapiuseralgorithmdetailrangeint(*this, 0 - var_1);
}
struct IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_fragments_int {
    IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int left;
    IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int right;;
};

/* ------- Function Definitions --------- */
IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_fragments_int IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_make_fragments_int_returns_fragments_lt_int_gt_(IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int const& var_0, IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int const& var_1) {
    return (IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_fragments_int&&)INS_INIT(IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_fragments_int){var_0, var_1};
}
/* ------- Function Definitions --------- */
IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_fragments_int IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_spliter_int__static__IMP_split_returns_fragments_lt_int_gt_(uint64_t var_0, IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int const& var_1) {
    int32_t const& var_2 = var_1.begin_returns_constint();
    int32_t const& var_3 = var_1.end_returns_constint();
    int32_t var_4 = var_2 + (var_3 - var_2) / 2;
    return (IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_fragments_int&&)IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_make_fragments_int_returns_fragments_lt_int_gt_(IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int{var_2, var_4}, IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int{var_4, var_3});
}
/* ------- Function Definitions --------- */
IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_fragments_int IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int::split_returns_fragmentsint(uint64_t pos) const {
    return (IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_fragments_int&&)IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_spliter_int__static__IMP_split_returns_fragments_lt_int_gt_(pos, *this);
}
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
void IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int::store(allscale::utils::ArchiveWriter& var_1) const {
    var_1.write<int32_t >((*this)._begin);
    var_1.write<int32_t >((*this)._end);
}
/* ------- Function Definitions --------- */
IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int::load(allscale::utils::ArchiveReader& var_0) {
    int32_t var_1 = var_0.read<int32_t >();
    int32_t var_2 = var_0.read<int32_t >();
    DummyCtorParamType var_3;
    return {std::move(var_1), std::move(var_2), var_3};
}
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
/* ------- Function Definitions --------- */
void IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3::store(allscale::utils::ArchiveWriter& var_1) const {
    var_1.write<uint64_t >((*this).depth);
    var_1.write<IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int >((*this).range);
}
/* ------- Function Definitions --------- */
IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3 IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3::load(allscale::utils::ArchiveReader& var_0) {
    uint64_t pos = var_0.read<uint64_t >();
    IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int var_2 = var_0.read<IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int >();
    return {std::move(pos), std::move(var_2)};
}
/* ------- Function Definitions --------- */
bool allscale_fun_647(hpx::util::tuple<IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16 > const& var_0) {
    return ((IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3 const&)hpx::util::get<0 >(var_0)).range.IMP_size_returns_size_t() <= (uint64_t)1;
}
/* ------- Function Definitions --------- */
bool allscale_fun_651(hpx::util::tuple<IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16 > const& var_0) {
    return !allscale_fun_647(var_0);
}
struct __wi_allscale_wi_1_can_split {
    static bool call(hpx::util::tuple<IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16 > const& var_0);
};

bool __wi_allscale_wi_1_can_split::call(hpx::util::tuple<IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16 > const& var_0) {
    return allscale_fun_651(var_0);
}
/* ------- Function Definitions --------- */
IMP_ParticleCount allscale_fun_641(IMP_ParticleCount&& var_0, IMP_ParticleCount const& var_1) {
    var_0.operator+=(var_1);
    return std::move(var_0);
}
/* ------- Function Definitions --------- */
allscale::treeture<IMP_ParticleCount > allscale_fun_637(hpx::util::tuple<IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16 > const& var_0) {
    IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_fragments_int var_1 = (IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_fragments_int&&)((IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3 const&)hpx::util::get<0 >(var_0)).range.split_returns_fragmentsint(((IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3 const&)hpx::util::get<0 >(var_0)).depth);
    IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int var_2 = (IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int const&)var_1.left;
    IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int var_3 = (IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int const&)var_1.right;
    return allscale::runtime::treeture_combine(allscale::runtime::after(), std::move(allscale::spawn_with_dependencies<__wi_allscale_wi_1_work >(allscale::runtime::after(), (IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3 const&)INS_INIT(IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3){((IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3 const&)hpx::util::get<0 >(var_0)).depth + (uint64_t)1, (IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int const&)var_2}, (IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13 const&)hpx::util::get<1 >(var_0), (IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16 const&)hpx::util::get<2 >(var_0))), std::move(allscale::spawn_with_dependencies<__wi_allscale_wi_1_work >(allscale::runtime::after(), (IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3 const&)INS_INIT(IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3){((IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3 const&)hpx::util::get<0 >(var_0)).depth + (uint64_t)1, (IMP_allscale_colon__colon_api_colon__colon_user_colon__colon_algorithm_colon__colon_detail_colon__colon_range_int const&)var_3}, (IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13 const&)hpx::util::get<1 >(var_0), (IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16 const&)hpx::util::get<2 >(var_0))), &allscale_fun_641);
}
/* ------- Function Definitions --------- */
allscale::treeture<IMP_ParticleCount > allscale_fun_635(hpx::util::tuple<IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16 > const& var_0) {
    return allscale_fun_637(var_0);
}
/* ------- Function Definitions --------- */
hpx::util::tuple< > allscale_fun_643(hpx::util::tuple<IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16 > const& var_0) {
    return INS_INIT(hpx::util::tuple< >){};
}
struct __wi_allscale_wi_1_variant_0 {
    static allscale::treeture<IMP_ParticleCount > execute(hpx::util::tuple<IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16 > const& var_0);
    static hpx::util::tuple< > get_requirements(hpx::util::tuple<IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16 > const& var_0);
    static constexpr bool valid = true;
};

hpx::util::tuple< > __wi_allscale_wi_1_variant_0::get_requirements(hpx::util::tuple<IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16 > const& var_0) {
    return allscale_fun_643(var_0);
}
allscale::treeture<IMP_ParticleCount > __wi_allscale_wi_1_variant_0::execute(hpx::util::tuple<IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16 > const& var_0) {
    return allscale_fun_635(var_0);
}
/* ------- Function Definitions --------- */
IMP_ParticleCount allscale_fun_649(hpx::util::tuple<IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16 > const& var_0) {
    return (IMP_ParticleCount&&)hpx::util::get<1 >(var_0).operator()(((IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3 const&)hpx::util::get<0 >(var_0)).range.begin_returns_constint(), ((IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3 const&)hpx::util::get<0 >(var_0)).range.end_returns_constint());
}
/* ------- Function Definitions --------- */
IMP_ParticleCount allscale_fun_650(hpx::util::tuple<IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16 > const& var_0) {
    return (IMP_ParticleCount&&)hpx::util::get<1 >(var_0).operator()(((IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3 const&)hpx::util::get<0 >(var_0)).range.begin_returns_constint(), ((IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3 const&)hpx::util::get<0 >(var_0)).range.end_returns_constint());
}
/* ------- Function Definitions --------- */
IMP_ParticleCount rec(hpx::util::tuple<IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16 > const& var_0) {
    if (allscale_fun_647(var_0)) {
        return allscale_fun_649(var_0);
    } else {
        return allscale_fun_650(var_0);
    };
}
/* ------- Function Definitions --------- */
allscale::treeture<IMP_ParticleCount > allscale_fun_645(hpx::util::tuple<IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16 > const& var_0) {
    return allscale::treeture<IMP_ParticleCount >(rec(var_0));
}
struct __wi_allscale_wi_1_variant_1 {
    static allscale::treeture<IMP_ParticleCount > execute(hpx::util::tuple<IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16 > const& var_0);
    static hpx::util::tuple< > get_requirements(hpx::util::tuple<IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16 > const& var_0);
    static constexpr bool valid = true;
};

allscale::treeture<IMP_ParticleCount > __wi_allscale_wi_1_variant_1::execute(hpx::util::tuple<IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16 > const& var_0) {
    return allscale_fun_645(var_0);
}
hpx::util::tuple< > __wi_allscale_wi_1_variant_1::get_requirements(hpx::util::tuple<IMP_RecArgs_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_compiler_slash_api_slash_code_slash_api_slash_include_slash_allscale_slash_api_slash_user_slash_algorithm_slash_preduce_dot_h_45_3, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13_int_struct_space_ipic3d_colon__colon_UniverseProperties_double_int_int_double_double_int_int_ParticleCount_int_int_IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_225_13, IMP__Insieme__lambda__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16_ParticleCount_ParticleCount_space__ampersand__ampersand__const_space_ParticleCount_space__ampersand__IMLOC__slash_home_slash_herbert_slash_coding_slash_c_plus__plus__slash_allscale_ipic3d_slash_code_slash_app_slash_src_slash_pic_tracer_dot_cxx_256_16 > const& var_0) {
    return allscale_fun_643(var_0);
}
allscale::treeture<int32_t > __wi_main_variant_0::execute(hpx::util::tuple<int32_t, char** > const& var_0) {
    return allscale_fun_3(var_0);
}
struct __wi_main_variant_1 {
    static allscale::treeture<int32_t > execute(hpx::util::tuple<int32_t, char** > const& var_0);
    static constexpr bool valid = true;
};

allscale::treeture<int32_t > __wi_main_variant_1::execute(hpx::util::tuple<int32_t, char** > const& var_0) {
    return allscale_fun_3(var_0);
}
/* ------- Function Definitions --------- */
bool allscale_fun_674(hpx::util::tuple<int32_t, char** > const& var_0) {
    return (bool)false;
}
struct __wi_main_can_split {
    static bool call(hpx::util::tuple<int32_t, char** > const& var_0);
};

bool __wi_main_can_split::call(hpx::util::tuple<int32_t, char** > const& var_0) {
    return allscale_fun_674(var_0);
}

